<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UITableView</title>
      <link href="/2020/05/27/iOS/ios-UITabelView/"/>
      <url>/2020/05/27/iOS/ios-UITabelView/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">iOS</span><span class="label label-info">UITableView</span><h1>1.UITableView</h1><p>UITableView 선언<br><code>class UITableView : UIScrollView</code></p><center><img width="100%" style="max-width: 300px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82970472-5cc94480-a00b-11ea-9448-54a4bc975295.png"></center><p>UIScrollView를 상속받아 리스트 형태로 반복되는 아이템을 보여주기 위한 뷰</p><h2 id="1-1-Plain-Table-Views">1.1.Plain Table Views</h2><ul><li>기본 스타일</li><li>하나 이상의 섹션(section)을 가질 수 있으며 각 섹션은 다시 하나 이상의 로우(row) 를 가짐</li><li>각 섹션은 그 자신의 헤더/푸터 뷰를 가질 수 있고 해당 섹션이 보여질 때 헤더뷰는 Top, 푸터뷰는 Bottom에 고정</li><li>섹션을 빠르게 검색할 수 있도록 Indexed List설정 가능</li></ul><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82977418-bb4aee80-a01c-11ea-8f3a-499b87088196.png"></center><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/83086855-d6743780-a0ca-11ea-9bf3-7377ced51f9e.png"></center><h2 id="1-2-Grouped-Table-Views">1.2.Grouped Table Views</h2><ul><li>관련된 아이템들을 하나의 그룹으로 그룹핑</li><li>테이터 계층 구조에 대한 상세 정보를 표현 하는데 적합한 형태</li><li>Plain스타일과 달리 헤더뷰와 푸터뷰가 Top, Bottom에 고정되지 않음</li></ul><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82977456-d87fbd00-a01c-11ea-9bdb-6a4327a6cca1.png"></center><h2 id="1-3-UITableViewDataSource">1.3.UITableViewDataSource</h2><p><em>TableView에서 표현할 데이터를 제공하는데 사용하는 프로토콜</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UITableViewDataSourece</span>: <span class="title">NSObjectProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableViewL UITbleView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">이처럼 프로토콜로 지정되었기 때문에 `<span class="type">UITableViewDataSourece</span>`를 사용한다면 아래의 함수를 `필수`로 작성해 주어야 한다.</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// 섹션별 row 갯수 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터 소스에 테이블 뷰에 지정된 섹션에있는 행 수를 반환한다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="comment">// UITableViewCell 커스터마이징 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테이블 뷰의 특정 위치에 셀이 삽입되도록 데이터 소스를 요청한다.</p><p><em>필수가 아닌데이터 소스</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">데이터 소스에 테이블뷰에서 섹션수를 리턴하도록 요청한다.</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테이블뷰에서 지정된 섹션의 헤더 제목을 데이터 소스에 요청한다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, titleForFooterInSection section: Int)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테이블뷰의 지정된 섹션 바닥 글 제목을 데이터 소스에 요청한다.</p><p><em>추가로 더 많은 정보는 애플 공식 문서인 <a href="https://developer.apple.com/documentation/uikit/uitableviewdatasource#3081118" target="_blank" rel="noopener">이곳</a> 에서 확인할 수 있다.</em></p><h3 id="1-3-1-UITableView-기본-셀-사용">1.3.1.UITableView 기본 셀 사용</h3><p><em>1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cell = <span class="type">UITableViewCell</span>(style: .<span class="keyword">default</span>, reuseIdentifier: <span class="string">"CellID"</span>)</span><br><span class="line">cell.textLabel?.text = <span class="string">"\(indexPath.row)"</span></span><br><span class="line"><span class="keyword">return</span> cell</span><br></pre></td></tr></table></figure><p>위의 코드는 만약 셀의 개수가 엄청 많은 경우 그냥 셀을 생성하기만 하기 때문에 재사용하는 코드가 아니다. 이제 이것을 재사용이 가능한 코드로 변경해보자</p><p><em>2번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cell: <span class="type">UITableViewCell</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> reuseableCell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CellID"</span>) &#123;</span><br><span class="line">    cell = reuseableCell</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cell = <span class="type">UITableViewCell</span>(style: .<span class="keyword">default</span>, reuseIdentifier: <span class="string">"CellID"</span>)</span><br><span class="line">&#125;</span><br><span class="line">cell.textLabel?.text = <span class="string">"\(indexPath.row)"</span></span><br><span class="line"><span class="keyword">return</span> cell</span><br></pre></td></tr></table></figure><p>위의 코드는 테이블 뷰에서 재사용 할 수 있는 셀이 있나 확인하고 재사용할 수 있는 셀이 있다면 큐라는 공간에서 꺼낸다(deque) <code>withIdentifier</code> 에 지정한 아이디를 가지고 뺴려고 하는 셀과 동일한 identifier을 가진 셀을 꺼내온다 셀이 없다면 새로운 reuseIdentifire를 지정해주고 셀을 만들게 된다.</p><p><em>3번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CellID"</span>, <span class="keyword">for</span>: indexPath)</span><br><span class="line">cell.textLabel?.text = <span class="string">"\(indexPath.row)"</span></span><br><span class="line"><span class="keyword">return</span> cell</span><br></pre></td></tr></table></figure><p>위의 코드는 이전 코드를 더욱 간결하게 작성한 코드이지만, 이 코드를 작성하고 바로 실행을 하면 다음과 같은 런타임 에러를 반환한다.<br><code>Thread 1: Exception: &quot;unable to dequeue a cell with identifier CellID - must register a nib or a class for the identifier or connect a prototype cell in a storyboard&quot;</code><br>이와 같은 에러가 나오는 이유는 셀의 identifier를 등록해준곳이 없기 때문에 나타나는데,</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">"CellID"</span>)</span><br></pre></td></tr></table></figure><p>이와같이 <code>register</code>를 작성하여 해결하면 된다. 첫번쨰 전달인자는 어떤 클래스를 사용할 것인지 작성해주면 되고 두번째 전달인자는 셀의 아이디를 작성해 주면 된다.<br>만약 커스텀 클래스를 사용할 경우에는 register의 첫번째 전달인자를 커스텀 클래스로 해주면 된다.</p><p>register를 사용하지 않는다면 2번 방법을 사용하여 작성해야 한다.</p><p>새로운 identifier를 사용한다면 새로 등록하게되고<br>같은 identifier를 사용한다면 이전에 등록한 클래스를 업데이트 한다.</p><h2 id="1-4-UITabelViewDelegate">1.4.UITabelViewDelegate</h2><p>Interaction 과 관련된 동작을 커스터마이징 하는 프로토콜</p><h2 id="1-5-UITableViewCell">1.5.UITableViewCell</h2><p>TableView에서 사용하는 각 아이템을 담는 컨테이너, 반복되는 셀을 매번 생성-해제-재할당 하는 부담을 덜기 위해 화면에 보이지 않는 부분의 셀을 재사용</p><ul><li>contentView<ul><li>textLabel</li><li>detailTextLabel</li><li>imageView</li></ul></li><li>accessoryView</li></ul><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82994264-d3cb0100-a03c-11ea-8acc-ac33f664ae89.png"></center><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82995355-73d55a00-a03e-11ea-8a9e-457f4574d60b.png"></center><h2 id="1-6-UITableViewCell-Identifier">1.6.UITableViewCell Identifier</h2><p><em>각 Cell을 구분해서 재사용하기 위한 식별자</em></p><center><img width="100%" style="max-width: 300px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82979316-b6d50480-a021-11ea-88d9-356b175bd1eb.png"></center><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"CellID"</span>, <span class="keyword">for</span>: indexPath)</span><br><span class="line">    cell.textLabel?.text = <span class="string">"\(indexPath.row)"</span></span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드에서는 <code>withIdentifier</code>에 넘겨준 <code>CellID</code>가 Identifier이다.</p><h3 id="1-6-1-UITableViewCell-Style">1.6.1.UITableViewCell Style</h3><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82993905-48ea0680-a03c-11ea-9e32-0f21b3b454a8.png"></center><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82994119-9e261800-a03c-11ea-94c0-b174b29817e8.png"></center><blockquote><h2 id="Reference-⚑">Reference ⚑</h2><p><a href="https://developer.apple.com/documentation/uikit/uitableviewa" target="_blank" rel="noopener">UITableView - UIKit | Apple Developer Documentation</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>계산기</title>
      <link href="/2020/05/23/Practice/practice-Calculator/"/>
      <url>/2020/05/23/Practice/practice-Calculator/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Practice</span><span class="label label-info">iOS</span><span class="label label-info">Swift</span><span class="label label-info">Calculator</span><h1>1.Calculator</h1><h2 id="1-1-요구사항">1.1.요구사항</h2><ul><li>displayLabel 에는 2 + 3 / 4 와 같이 여러 개의 표현식이 출력되지 않고 결과창에는 항상 숫자만 표현</li><li>곱하기(×)와 나누기(÷) 기호는 control + command + spacebar를 눌러서 수학 기호를 사용해야 함</li><li>2 + 3 * 4를 하면 2 + (3 * 4) = 14가 되는 게 아니라 (2 + 3) * 4 와 같이 항상 누른 순서대로 연산</li><li>2 + =  순으로 누르면 현재 displayLabel에 표현된 숫자인 2가 더해져 2 + 2 = 4 와 같이 동작<br>단, 다시 한 번 = 를 누르면 더 이상 계산되지 않음</li><li>2 + + + x - 3 = 순으로 누르면 최종적으로 - 연산자가 적용되어 2 - 3 = -1</li><li>등호(=)를 눌러 계산 결과가 나온 뒤 연산자를 누르지 않고 바로 숫자를 입력하면<br>기존의 값은 초기화되고 다시 처음부터 시작</li><li>displayLabel에 입력할 수 있는 숫자는 최대 13자리.  (계산 결과로 인해 나오는 숫자는 무관)</li></ul><h2 id="1-2-테스트케이스">1.2.테스트케이스</h2><table><thead><tr><th>테스트케이스</th><th>결과</th></tr></thead><tbody><tr><td>12 = 3</td><td>3  -  12는 초기화 되고 최초에 3을 누른 것부터 다시 시작</td></tr><tr><td>12 + 3 = + 4 =</td><td>19 -  12 + 3 + 4 = 19</td></tr><tr><td>12 + 3</td><td>12 (화면상에는 3) - 아직 3이 더해지지 않은 상태</td></tr><tr><td>12 + 3 -</td><td>15 -  -버튼이 눌려지는 순간 앞의 + 연산이 수행됨</td></tr><tr><td>12 + 3 * + - *</td><td>15 -  연산자만 바꾸는 것은 결과에 영향 없이 다음에 수행할 연산자를 덮어씀</td></tr><tr><td>12 + - * / 3 =</td><td>4  -  마지막으로 누른 연산자(/)로 연산. 12 / 3 = 4</td></tr><tr><td>12 + =</td><td>24 -  12 + 12 = 24</td></tr><tr><td>12 + = = =</td><td>24 -  12 + 12 = 24,  등호(=)는 이전 연산자에 대해 한 번만 계산</td></tr><tr><td>12 ±<em>/ ±</em>/</td><td>12 -  연산자를 막 바꿔가면서 눌렀을 때 이상 없는지 체크</td></tr><tr><td>-5 + 1 =</td><td>-4 -  초기 상태에서 -버튼부터 누르고 시작할 때도 정상적으로 연산</td></tr><tr><td>1 * 2 + 3 / 2 - 1 =</td><td>1.5 -  연산자 우선순위와 관계없이 항상 앞에 있던 연산자부터 계산</td></tr></tbody></table><p><em>숫자를 큰 수나 작은 수 음수로 바꿔가며 결과가 제대로 나오는지 테스트해보기</em></p><h2 id="1-3-Commit">1.3.Commit</h2><h3 id="1-3-1-Commit-message-convension">1.3.1.Commit message convension</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docs: 문서 수정</span><br><span class="line">feat: 새로운 기능 추가</span><br><span class="line">test: 테스트 코드, 리펙토링 테스트 코드 추가</span><br><span class="line">fix: 버그 수정</span><br></pre></td></tr></table></figure><p><em><a href="http://localhost:4000/2020/05/14/git/git-CommitMessage" target="_blank" rel="noopener">관련 문서</a></em></p><h3 id="1-3-2-Init-project">1.3.2.Init project</h3><p>프로젝트 생성 및 git init</p><p><img src="https://user-images.githubusercontent.com/45344633/82724266-c85f9900-9d0f-11ea-8d23-e40c0d138c62.png" alt="image"></p><h3 id="1-3-3-초기-프로젝트-구조-및-스토리보드-UI-추가">1.3.3.초기 프로젝트 구조 및 스토리보드 UI 추가</h3><p><img src="https://user-images.githubusercontent.com/45344633/82724099-9dc11080-9d0e-11ea-8c5c-b102084d973b.png" alt="image"></p><ul><li><p>Deployment info</p><ul><li>Target Device - iOS12.2</li><li>Device Orientation - Portrait<br><img src="https://user-images.githubusercontent.com/45344633/82723604-f9899a80-9d0a-11ea-9fc2-aa2ec7e8bc0e.png" alt="image"></li></ul></li><li><p>AppDelegate.swift - window 연결</p></li><li><p>Seendelegate.swift - 파일 제거</p></li><li><p>Main.storyboard - 계산기 레이아웃 생성</p></li><li><p>Assets.xcassets - 아이콘 추가<br><img src="https://user-images.githubusercontent.com/45344633/82723460-1d001580-9d0a-11ea-9366-85ed10f8dbf4.png" alt="image"></p></li><li><p>Info.plist - Application Scene Manifest 제거<br><img src="https://user-images.githubusercontent.com/45344633/82723717-d4e1f280-9d0b-11ea-9b05-4b006297a830.png" alt="image"></p></li></ul><h3 id="1-3-4-IBOutlet-및-IBAction설정">1.3.4.IBOutlet 및 IBAction설정</h3><p>레이블과 버튼에 액션과 아웃렛 설정<br><img src="https://user-images.githubusercontent.com/45344633/82724614-4a50c180-9d12-11ea-8bf0-bbe000e61f07.png" alt="image"></p><h3 id="1-3-5-입력된-버튼-종류에-따른-명령-분기">1.3.5.입력된 버튼 종류에 따른 명령 분기</h3><p><em>Command.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> addDigit(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> operation(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">equal</span></span><br><span class="line">    <span class="keyword">case</span> clear</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ViewController.swift - func didTapButton</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> input = sender.currentTitle  <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> commend: <span class="type">Command</span></span><br><span class="line">        <span class="keyword">switch</span> input &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"AC"</span>:</span><br><span class="line">            commend = .clear</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"="</span>:</span><br><span class="line">            commend = .<span class="built_in">equal</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"×"</span>, <span class="string">"÷"</span>:</span><br><span class="line">            commend = .operation(input)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            commend = .addDigit(input)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(commend)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>입력을 받는 버튼의 숫자, 연산자, =, AC 를 Command enum의 연관랎으로 받아 구분</p><h3 id="1-3-6-입력된-버튼의-타이틀-출력">1.3.6.입력된 버튼의 타이틀 출력</h3><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> displayValue: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> displayLabel.text ?? <span class="string">""</span> &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; displayLabel.text = newValue &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ViewController.swift - func didTapButton</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">displayValue = input</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"display : \(displayValue), command : \(commend)"</span>)</span><br></pre></td></tr></table></figure><p><code>displayValue</code>를 통해 새로들어온 값을 <code>newValue</code>로 받아 <code>displayLabel</code>에 출력</p><h3 id="1-3-7-입력된-커멘드를-활용하는-함수-생성">1.3.7.입력된 커멘드를 활용하는 함수 생성</h3><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">displayValue = performCommand(commend, with: displayValue)</span><br></pre></td></tr></table></figure><p><em>ViewController.swift - func performCommand</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">performCommand</span><span class="params">(<span class="number">_</span> command: Command, with displayText: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> command &#123;</span><br><span class="line">    <span class="keyword">case</span> .addDigit(<span class="keyword">let</span> input):</span><br><span class="line">        <span class="keyword">return</span> displayText + input</span><br><span class="line">    <span class="keyword">case</span> .operation(<span class="number">_</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="built_in">equal</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> .clear:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>입력된 커멘드에따라 <code>displayText</code>에 추가 혹은 0으로 초기화 함수생성</p><h3 id="1-3-8-입력된-텍스트-길이-제한">1.3.8.입력된 텍스트 길이 제한</h3><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> shouldResetText = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">addDight</span><span class="params">(value newValue: String, to oldValue: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> displayStirng = shouldResetText ? newValue</span><br><span class="line">        : oldValue.<span class="built_in">count</span> &gt; <span class="number">13</span> ? oldValue</span><br><span class="line">        : oldValue + newValue</span><br><span class="line">    shouldResetText = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> displayStirng</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ViewController.swift - func performCommand</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">performCommand</span><span class="params">(<span class="number">_</span> command: Command, with displayText: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> command &#123;</span><br><span class="line">    <span class="keyword">case</span> .addDigit(<span class="keyword">let</span> input):</span><br><span class="line">        <span class="keyword">return</span> addDight(value: input, to: displayText)</span><br><span class="line">    <span class="keyword">case</span> .operation(<span class="number">_</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="built_in">equal</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> .clear:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    shouldResetText = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>문자열의 길이를 제한하기 위하여 <code>addDigit</code>의 기능을 확장하여 함수를 생성한 후 함수 내부에서 shouldResetText의 기본값을 ture 로 설정 후 13자리를 판별한후 <code>displayString</code>를 반환한다</p><h3 id="1-3-9-입력된-문자의-연산기호-기능-추가">1.3.9.입력된 문자의 연산기호 기능 추가</h3><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> accumulator = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> bufferOperator: <span class="type">String?</span></span><br></pre></td></tr></table></figure><p><em>ViewController.swift - func calculate</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="keyword">for</span> newValue: String)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> operand = <span class="type">Double</span>(newValue)!</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">switch</span> bufferOperator &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"+"</span>: <span class="keyword">return</span> accumulator + operand</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"-"</span>: <span class="keyword">return</span> accumulator - operand</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"×"</span>: <span class="keyword">return</span> accumulator * operand</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"÷"</span>: <span class="keyword">return</span> accumulator / operand</span><br><span class="line">  <span class="keyword">default</span>: <span class="keyword">return</span> operand</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ViewController.swift - func performCommand</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">performCommand</span><span class="params">(<span class="number">_</span> command: Command, with displayText: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> result: <span class="type">Double?</span></span><br><span class="line">  <span class="keyword">switch</span> command &#123;</span><br><span class="line">  <span class="keyword">case</span> .addDigit(<span class="keyword">let</span> input):</span><br><span class="line">    <span class="keyword">return</span> addDigit(value: input, to: displayText)</span><br><span class="line">  <span class="keyword">case</span> .operation(<span class="keyword">let</span> op):</span><br><span class="line">    accumulator = calculate(<span class="keyword">for</span>: displayText)</span><br><span class="line">    bufferOperator = op</span><br><span class="line">    result = accumulator</span><br><span class="line">  <span class="keyword">case</span> .<span class="built_in">equal</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> .clear:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  shouldResetText = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="type">String</span>(result ?? <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-10-연산자-사칙연산-기능-추가">1.3.10.연산자 사칙연산 기능 추가</h3><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> shouldResetText = <span class="literal">true</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> accumelator = <span class="number">0.0</span></span><br></pre></td></tr></table></figure><p><em>ViewController.swift - func calculator</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(<span class="keyword">for</span> newValue: String)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> operand = <span class="type">Double</span>(newValue)!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> bufferOperator &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"+"</span>: <span class="keyword">return</span> accumelator + operand</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"-"</span>: <span class="keyword">return</span> accumelator - operand</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"×"</span>: <span class="keyword">return</span> accumelator * operand</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"÷"</span>: <span class="keyword">return</span> accumelator / operand</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> operand</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">*<span class="type">ViewController</span>.swift - <span class="function"><span class="keyword">func</span> <span class="title">performCommand</span>*</span></span><br><span class="line"><span class="function">```<span class="title">swift</span></span></span><br><span class="line"><span class="function"><span class="title">private</span> <span class="title">func</span> <span class="title">performCommand</span><span class="params">(<span class="number">_</span> command: Command, with displayText: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result: <span class="type">Double?</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> command &#123;</span><br><span class="line">    <span class="keyword">case</span> .addDigit(<span class="keyword">let</span> input):</span><br><span class="line">        <span class="keyword">return</span> addDight(value: input, to: displayText)</span><br><span class="line">    <span class="keyword">case</span> .operation(<span class="keyword">let</span> op):</span><br><span class="line">        accumelator = calculate(<span class="keyword">for</span>: displayText)</span><br><span class="line">        bufferOperator = op</span><br><span class="line">        result = accumelator</span><br><span class="line">    <span class="keyword">case</span> .<span class="built_in">equal</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> .clear:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    shouldResetText = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>(result ?? <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>입력받은 연산자를 <code>performCommand</code>함수에서 분기하여 화면상의 숫자를 전달인자로 받은 <code>calculate</code>함수 에서 연산하여 Double타입으로 리턴한다.</p><h3 id="1-3-11-사칙연산-기능-개선">1.3.11.사칙연산 기능 개선</h3><p><em>ViewController.swif - didTapButtont</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> input = sender.currentTitle  <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> commend: <span class="type">Command</span></span><br><span class="line">    <span class="keyword">switch</span> input &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"AC"</span>:</span><br><span class="line">        commend = .clear</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"="</span>:</span><br><span class="line">        commend = .<span class="built_in">equal</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"×"</span>, <span class="string">"÷"</span>:</span><br><span class="line">        commend = .operation(input)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        commend = .addDigit(input)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> result = performCommand(commend, with: displayValue)</span><br><span class="line">    displayValue = limitFractionDigits(to: result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"display : \(displayValue), command : \(commend)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ViewController.swift - func limitFractionDigits</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">limitFractionDigits</span><span class="params">(to numString: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> number = <span class="type">Double</span>(numString) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="string">"0"</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> formatter = <span class="type">NumberFormatter</span>()</span><br><span class="line">    formatter.minimumFractionDigits = <span class="number">0</span></span><br><span class="line">    formatter.maximumFractionDigits = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> formatter.string(from: number <span class="keyword">as</span> <span class="type">NSNumber</span>) ?? <span class="string">"0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>연산시 소수점 이하 3자리 이하로 떨어지지 않게 하기위한 함수 추가 <code>NumberFormmater()</code>활용</p><blockquote><h2 id="Project-repositories">Project repositories</h2><p><a href="https://github.com/devyhan93/Calculator" target="_blank" rel="noopener">Git Hub Repositories</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Practice </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xcode Git 연동</title>
      <link href="/2020/05/22/Xcode/xcode-Git/"/>
      <url>/2020/05/22/Xcode/xcode-Git/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Xcode</span><span class="label label-info">G</span><h1>1.Xcode Git 연동</h1><p>Xcode에서 git을 사용하기 위한 설정하는 방법</p><h2 id="1-1-Xcode-에서-git-사용하기">1.1.Xcode 에서 git 사용하기</h2><h3 id="1-1-1-git-remote-설정">1.1.1.git remote 설정</h3><p>git을 사용하기위하여 소스컨트롤 네비게이터를 통해 항목을 프로젝트 항목을 선택하고 마우스 우클릭한 다음, [Create “프로젝트 이름” Remote…] 메뉴를 선택<br><img src="https://user-images.githubusercontent.com/45344633/82652925-68a6b680-9c59-11ea-9902-c468b5ceb535.png" alt="image"></p><p>선택후 저장소를 생성하기 위한 정보 입력<br>Account : 사용자 계정<br>Owner : 소스 코드의 소유자<br>Repository Name : 저장소 이름<br>Description : 커밋 내용에 대한 설명<br>Visibility : 저장소의 공개/비공개 여부(사용자 계정의 종류에 따라 선택할 수 있는 폭이 제한됨)<br>Remote Name : 소스 컨트롤 네비게이터에 표시된 원격지 이름</p><p><img src="https://user-images.githubusercontent.com/45344633/82653784-b243d100-9c5a-11ea-947a-0a173ac66522.png" alt="image"></p><blockquote><h2 id="Reference-⚑">Reference ⚑</h2><p><a href="http://blog.naver.com/PostView.nhn?blogId=sqlpro&amp;logNo=221048051319&amp;parentCategoryNo=&amp;categoryNo=17&amp;viewDate=&amp;isShowPopularPosts=true&amp;from=search" target="_blank" rel="noopener">[꼼꼼한 재은씨 실전편] 학습을 위한 Xcode의 구조와 활용 - 6. 깃허브 연동하기</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Iphone</title>
      <link href="/2020/05/22/Xcode/xcode-Iphone/"/>
      <url>/2020/05/22/Xcode/xcode-Iphone/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Xcode</span><span class="label label-info">G</span><h1>1.</h1>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xcode 코드 스니펫(Code Snippet)</title>
      <link href="/2020/05/16/Xcode/xcode-CodeSnippet/"/>
      <url>/2020/05/16/Xcode/xcode-CodeSnippet/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Xcode</span><span class="label label-info">CodeSnippet</span><h1>1.Xcode 코드 스니펫(Xcdoe Code Snippet)</h1><p>코드를 작성할때, 자주 자용하는 코드를 저장하는 기능인 코드 스니펫 기능을 활용하여 더 빠른 코딩을 할 수 있다.</p><h2 id="1-1-스니펫-생성">1.1.스니펫 생성</h2><h3 id="1-1-1-지정할-코드-작성">1.1.1.지정할 코드 작성</h3><p>스니펫을 작성할 코드를 작성하여 Command(⌘) + C 로 복사한다.</p><p><em>Example</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foundationLabel</span><span class="params">(label: UILabel, text: String, frame: CGRect, alignment: NSTextAlignment, color: UIColor)</span></span> &#123;</span><br><span class="line">    label.text = text</span><br><span class="line">    label.frame = frame</span><br><span class="line">    label.textAlignment = alignment</span><br><span class="line">    label.textColor = color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-스니펫-만들기">1.1.2.스니펫 만들기</h3><p>Xcode에서 스니펫을 작성할 코드를 복사하고, 상단의 Helpd에서 snippet을 검색한다.<br><img src="https://user-images.githubusercontent.com/45344633/82114035-2f6fd180-9795-11ea-9852-ff66b1104e21.png" alt="image"></p><p>Help 에서 Snippet 검색후 표시되는 스니펫 화면에 들어가게 되면</p><p><img src="https://user-images.githubusercontent.com/45344633/82114229-77dbbf00-9796-11ea-84fc-b391b96b2054.png" alt="image"></p><p>아까 스니펫으로 지정하려고 복사해 놓았던 코드가 자동으로 My Code Sinppet 이라는 이름으로 들어가있게 된다.</p><h3 id="1-1-3-스니펫-설정">1.1.3.스니펫 설정</h3><p>세부적인 설정을 위해 Snippet창의 우측 하단에 Edit로 들어간다.</p><p><img src="https://user-images.githubusercontent.com/45344633/82114939-aa87b680-979a-11ea-9b25-f1bdbdd988fd.png" alt="image"></p><p>먼저 지정하려고 하는 Snippet의 이름을 지정해주고 Summary에 만들려고 하는 스니펫의 간단한 설명을 작성해준다 언어 설정 및 플랫폼(iOS, WatchOS, tvOS, macOS)과 스니펫이 적용될 범위를 지정해주고 마지막으로 제일 중요한 자동 완성 키워드를 작성한후 저장하게되면</p><h3 id="1-1-4-스니펫-사용">1.1.4.스니펫 사용</h3><p><img src="https://user-images.githubusercontent.com/45344633/82114560-73b0a100-9798-11ea-8c04-3bf8cabdedd2.png" alt="image"></p><p>지정한 스니펫이 Xcode의 suggestion에 뜨는것을 확인 할 수 있다.</p><h3 id="1-1-5-스니펫애-회색-글씨-넣기">1.1.5.스니펫애 회색 글씨 넣기</h3><p>이미 만들어진 스니펫 switch구문 등 을 사용해보면 회색 글씨로 선언된 문자를 볼 수 있는데 개인이 만든 스니펫에도 이와같이 적용을 하는 방법은 아래와 같다<br><img src="https://user-images.githubusercontent.com/45344633/82772118-2e1b6480-9e79-11ea-8db2-1d996f852281.png" alt="image"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;# 텝으로 이동시킬 이름 #&gt;</span><br></pre></td></tr></table></figure><p>이와같이 <code>&lt;##&gt;</code>로 감싸게 되면 안에 작성한 글씨가 위와 같이 적용되어 나타난다</p><blockquote><h2 id="Reference-⚑">Reference ⚑</h2><p><a href="https://zeddios.tistory.com/280" target="_blank" rel="noopener">Code Snippet사용해보기</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>커밋 메시지 컨벤션(Commit message convention)</title>
      <link href="/2020/05/14/git/git-CommitMessage/"/>
      <url>/2020/05/14/git/git-CommitMessage/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Git</span><span class="label label-info">CommitMessageConvention</span><h1>1.커밋 메시지 컨벤션(Commit message convention)</h1><p>더 좋은 커밋 로그 가독성과 더 나은 협업과 리뷰 프로세스와 더 쉬운 코드 유지보수를 위해 좋은 커밋 메시지를 작성해보자</p><h2 id="1-1-커밋-메시지-구조-Commit-message-structuer">1.1.커밋 메시지 구조(Commit message structuer)</h2><p>커밋 메시지를 작성할때에는 제목/본문/꼬리말로 구성한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type: Title</span><br><span class="line">Body</span><br><span class="line">Footer</span><br></pre></td></tr></table></figure><h2 id="1-2-Type">1.2.Type</h2><ul><li>docs: 문서 수정</li><li>feat: 새로운 기능 추가</li><li>test: 테스트 코드, 리펙토링 테스트 코드 추가</li><li>fix: 버그 수정</li></ul><h2 id="1-3-Title">1.3.Title</h2><ul><li>첫글자 대문자</li><li>50자 내외</li><li>마침표 (.) 금지</li></ul><h2 id="1-4-Body">1.4.Body</h2><ul><li>한칸 띄우고 작성하기</li><li>본문은 영문 기준 72자마다 줄 바꾸기</li><li>본문은 어떻게보다 무엇을, 왜에 맞춰 작성하기</li></ul><h2 id="1-5-Footer">1.5.Footer</h2><ul><li>선택사항이기 때문에 모든 커밋에 꼬리말을 작성할 필요는 없다.</li><li>issue tracker id를 작성할 때 사용한다.</li></ul><h2 id="1-6-커밋-예시-Commit-example">1.6.커밋 예시(Commit example)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">feat: Summarize changes in around 50 characters or less</span><br><span class="line"></span><br><span class="line">More detailed explanatory text, if necessary. Wrap it to about 72</span><br><span class="line">characters or so. In some contexts, the first line is treated as the</span><br><span class="line">subject of the commit and the rest of the text as the body. The</span><br><span class="line">blank line separating the summary from the body is critical (unless</span><br><span class="line">you omit the body entirely); various tools like &#96;log&#96;, &#96;shortlog&#96;</span><br><span class="line">and&#x2F; &#96;rebase&#96; can get confused if you run the two together.</span><br><span class="line"></span><br><span class="line">Explain the problem that this commit is solving. Focus on why you</span><br><span class="line">are making this change as opposed to how (the code explains that).</span><br><span class="line">Are there side effects or other unintuitive consequenses of this</span><br><span class="line">change? Here&#39;s the place to explain them.</span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line"> - Bullet points are okay, too</span><br><span class="line"></span><br><span class="line"> - Typically a hyphen or asterisk is used for the bullet, preceded</span><br><span class="line">   by a single space, with blank lines in between, but conventions</span><br><span class="line">   vary here</span><br><span class="line"></span><br><span class="line">If you use an issue tracker, put references to them at the bottom,</span><br><span class="line">like this:</span><br><span class="line"></span><br><span class="line">Resolves: #123</span><br><span class="line">See also: #456, #789</span><br></pre></td></tr></table></figure><blockquote><h2 id="Reference-⚑">Reference ⚑</h2><p><a href="https://meetup.toast.com/posts/106" target="_blank" rel="noopener">좋은 git 커밋 메시지를 작성하기 위한 7가지 약속</a><br><a href="https://doublesprogramming.tistory.com/256" target="_blank" rel="noopener">Git - 커밋 메시지 컨벤션</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>값(Value) 타입 참조(Reference) 타입</title>
      <link href="/2020/05/12/Using-Swift/using-ValRef/"/>
      <url>/2020/05/12/Using-Swift/using-ValRef/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">UsingSwift</span><span class="label label-info">Valuetypes</span><span class="label label-info">Referencetypes</span><blockquote><p>미완</p></blockquote><h1>1.값(Value) 타입 참조(Reference) 타입</h1><p>값 타입과 참조 타입의 가장 큰 차이는 어떤 값이 전달되냐인데 값 타입이 전달인자로 전달될때는 값을 복사하여 전달하고 참조 타입이 전달인자로 전달될때는 값을 복사하지 않고 참조주소가 전달된다.</p><p><em>메모리 구조</em></p><center><img width="100%" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/81630185-e1c73200-943f-11ea-8668-e4e7815a24a5.png"></center><h2 id="1-1-값-타입-Value-types">1.1.값 타입(Value types)</h2><p>값 타입은 메모리의 Stack영역에 데이터가 저장되어 전달인자로 전달될때 값을 복사한다<br>스위프트에서의 값 타입은 struct, enum, tuple 등이 있다</p><h2 id="1-2-참조-타입-Reference-types">1.2.참조 타입(Reference types)</h2><p>참조 타입은 메모리의 Stack 영역에 데이터가 담긴 주소를 가르키는 포인터가 저장되고, Heap 영역에 실제 데이터가 저장된다<br>스위프트에서 참조 타입은 Class</p>]]></content>
      
      
      <categories>
          
          <category> Using Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UINavigationController</title>
      <link href="/2020/05/08/iOS/ios-UINavigationController/"/>
      <url>/2020/05/08/iOS/ios-UINavigationController/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">iOS</span><span class="label label-info">UINavigationController</span><h1>1.UINavigationController</h1><p><code>A container view controller that defines a stack-based scheme for navigating hierarchical content.</code></p><h2 id="1-1-Layered-Views">1.1.Layered Views</h2><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/83163198-b9c91580-a145-11ea-95ee-a89b3e44e205.png"></center><p>뷰의 계층으로 <code>window</code>가 있고, 그 위에 <code>Tab bar view - Navigation view - Custom view hierarchy</code> 가 순서대로 배치되게 된다.</p><p>그중 Tab bar나 Navigation은 공간 제외하고 표시하는데 최종적으로 Assembly vies로 합쳐진다.</p><h2 id="1-2-Navigation-Controller">1.2.Navigation Controller</h2><center><img width="100%" style="max-width: 500px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/83164084-c437df00-a146-11ea-880e-f1ab87f1de58.png"></center><p>오른쪽으로 넘어갈 때마다 depth가 깊어진다</p><h3 id="1-2-1-Navigation-Controller-Stack">1.2.1.Navigation Controller Stack</h3><center><img width="100%" style="max-width: 500px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/83164433-2e508400-a147-11ea-9ee7-6c53a6d37b0f.png"></center><p>NavigationController는 스텍 구조의 형태를 보이는데, depth가 깊어질수록 뷰에서는 해당 뷰가 상위로 나와야하고 뒤로가기를 눌렀을 경우 맨위에 존재하는 뷰가 사라지기 때문이다.</p><p><code>topViewController</code>은 Navigation의 stack에서 맨위에 존재하고</p><p><code>visibleViewController</code>은 사용자에게 보여지는 뷰애서 맨위에 존재한다.</p><center><img width="100%" style="max-width: 500px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/83165196-23e2ba00-a148-11ea-8d53-d7b16e6446b9.png"></center><p>이 그림에서 <code>UINavigationController</code>에 <code>childViewControllers</code>안에 쌓인 View Controller들이 Navigation Controller Stack인데 UINavigationController에 View Controller를 presentedViewController로 띄우게 된다면 사용자에게 보여지는 뷰인 visibleViewController는 presentedViewController로띄운 view가 된다.</p><h2 id="1-3-UITabBarController">1.3.UITabBarController</h2><center><img width="100%" style="max-width: 500px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/83166090-5a6d0480-a149-11ea-9f07-39ed8295891d.png"></center><p>컨테이너 뷰 컨트롤러인 <code>UITabBarController</code>는 <code>radio-style</code> 인터페이스를 가진다<br>라디오 버튼과 같은 원리 로 토글하면 <code>true</code>로 보여질 자식 뷰가 보이게 된다.</p><p>하나 이상의 버튼을 이용해 서로 다른 작업이나 뷰, 모델 등을 선택해 제어하기 위한 바 형식 네비게이션</p><p>보통 <code>UITabBarController</code>와 결합하여 많이 쓰지만 단독으로도 활용이 가능하다.</p><p><code>UIToolbar</code>와 비슷한 모양이지만 상이한 목적을 지닌다.</p><ul><li>탭바는 앱의 모드를 변화하기 위한것이다.</li><li>툴바는 현재 뷰컨트롤러의 컨텐츠에 관련된 액션을 수행하기 위한것이다.</li></ul><h3 id="1-3-1-UITabBarItem">1.3.1.UITabBarItem</h3><center><img width="100%" style="max-width: 500px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/83166862-7b822500-a14a-11ea-9eac-a9c39537d54d.png"></center><ul><li>하나의 TabBarItem마다 각가의 ViewController가 연결</li><li>ViewController에 tabBarItem속성을 통해 해당 아이템에 접근  가능</li><li>TabBar에는 최대 5개의 TabBarItem표현 5개를 초과할 경우 More아이템으로 대체</li></ul><h2 id="1-4-NavigationController-Codebase-구현">1.4.NavigationController Codebase 구현</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>객체지향 프로그래밍(Object Oriented Programing)</title>
      <link href="/2020/05/06/Foundation/Foundation-OOP/"/>
      <url>/2020/05/06/Foundation/Foundation-OOP/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Foundation</span><span class="label label-info">OOP</span><span class="label label-info">SwiftClass</span><h1>1.객체지향 프로그래밍(Object Oriented Programing)</h1><p>객체지향 프로그래밍이란, 캡슐화, 상속, 다형성을 이용하여 코드 재사용을 증가시키고 유지보수를 감소시키는 장점을 얻기 위해 객체들을 연결시켜 프로그래밍하는 하나의 패러다임</p><p>패러다임이란 어떤 시대·분야에서의 특징적인 사고 방식·인식의 체계, 틀 프로그램을 설계하는 방식에 대한 개념 또는 방법론이다.</p><p>패러다임은 프로그래머에게 프로그래밍의 관점을 갖게 해주고 결정하는 역할을 한다.</p><p>프로그래밍에서의 주요 패러다임의 종류로는 POP(Protocol-Oriented Programming), OOP(Object-Oriented Programming), FP(Functional Programming), 등이고 Swift에서 지향하는 패러다임은 POP이다.</p><p><em>Swift Class</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 클래스</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 속성, 데이터, 상태</span></span><br><span class="line">    <span class="keyword">var</span> variable1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> variable2 = <span class="string">"2"</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 행위, 메서드, 동작</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">functionName1</span><span class="params">(param: Int)</span></span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">functionName2</span><span class="params">(param: String)</span></span> &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-OOP의-특성">1.1.OOP의 특성</h2><h3 id="1-1-1-추상화-Abstraction">1.1.1.추상화(Abstraction)</h3><p>공통적인 속성이나 기능을 묶어 이름을 붙이는 것으로, 사물들의 공통적인 특징을 파악하여 인식의 대상으로 삼는 행위이다. 각 개체의 구체적인 개녀보다 추상적인 개념에 의존해야 설계를 유연하게 변경 할 수 있다.</p><p>자동차, 오토바이, 비행기 등의 공통된 특징은 이동수단이라는 집합으로 나뉜다 자통차나 오토바이의 경적소리(구체적인 개념)이 아니라 경적(추상적인 개념)으로 설계해야 한다.</p><h3 id="1-1-2-캡슐화-Encapsulation">1.1.2.캡슐화(Encapsulation)</h3><p>데이터의 구조와 데이터를 다루는 방법을 결합시키는 것으로, 객체가 맏은 역할을 수행하기 위한 하나의 목적을 묶는 것이다.</p><p>자동차로 예를 들면, 데이터 구조는 핸들과 브레이크 가속패달 등이 되고 데이터를 다루는 방법은 운전하는 방법으로 생각하면 된다. 버스와 승용차 화물차의 운전 방법이 다른것과 같다.</p><h3 id="1-1-3-상속-Inheritance">1.1.3.상속(Inheritance)</h3><p>상위 개념의 특징을 하위 개념이 물려받는것으로, 상속이라는 개념이 없으면 객체지향과 절차지향의 차이가 없다. 같은 기능을 또 구현할 필요가 없고 코드의 재사용성이 증가한다.</p><p>이동수단이라는 상위개념에서 자동차, 오토바이, 비행기라는 하위 개념이 공통적인 특징(경적)을 물려받게 된다. 하지만 경적 소리와 같이 디테일한 요소는 다를 수 있다.</p><h3 id="1-1-4-다형성-Polymorphism">1.1.4.다형성(Polymorphism)</h3><p>서로다른 클래스의 객체가 같은 메세지를 받았을때 각자의 방식으로 동작하는것으로, 동물의 울음소리라는 메세지를 받으면 각기 다른 동물의 울음소리를 낼 수 있도록 설계 한다.</p><p>다형성이 없다면 동물의 울음소리를 각각 하나씩 지정해줘야한다. 다형성은 코드를 간결하게 할 뿐만 아니라, 변화에도 유연하게 대처할 수 있게한다.</p><h3 id="1-1-5-은닉화-Hiding">1.1.5.은닉화(Hiding)</h3><p>외부에서 정보를 쉽게 바꾸지못하게 하는것으로, 잘못된 데이터의 입력을 방지하고 개발자로부터 필요없는 정보를 숨겨준다.</p><p>사용자는 자동차를 주행하려면 시동을 걸고 가속패달을 밟는것만 알면 되는데 내부 점화 플러그나 실린더가 어떻게 움직이고 연료가 어떻게 분사되는지까지는 알아야할 필요가 없다. 은닉화는 그런 정보를 숨겨준다고 생각하면 된다.</p><blockquote><h2 id="Reference-⚑">Reference ⚑</h2><p><a href="https://seunghyun90.tistory.com/45" target="_blank" rel="noopener">OOP(Object-Oriented Programming)이란?</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xcode 단축키 모음</title>
      <link href="/2020/05/04/Xcode/xcode-XcodeHotkey/"/>
      <url>/2020/05/04/Xcode/xcode-XcodeHotkey/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Xcode</span><span class="label label-info">Hotkey</span><h1>1.Xcode 단축키 모음</h1><h2 id="1-1-실행-관련-단축키">1.1.실행 관련 단축키</h2><ul><li><p>command(⌘) + b : 빌드업</p></li><li><p>command(⌘) + s : 프로젝트 저장</p></li><li><p>command(⌘) + r : 시뮬레이터 실행</p></li></ul><h2 id="1-2-화면-관련-단축키">1.2.화면 관련 단축키</h2><ul><li><p>command(⌘) + ` : 같은 프로그램 내 화면이동</p></li><li><p>command(⌘) + shift(⇧) + [ or ] : 탭이동</p></li><li><p>option(⌥) + command(⌘) + 0 : Utilities 여닫</p></li><li><p>command(⌘) + 0 : Navigator 닫기</p></li><li><p>command(⌘) + 1, 2, 3, 4… : Navigator 열기</p></li><li><p>shift(⇧) + command(⌘) + y : Debug 여닫</p></li><li><p>command(⌘) + option(⌥) + enter : 현재창 이중분할</p></li><li><p>option(⌥) + 파일선택 : 선택파일 화면분할</p></li><li><p>command(⌘) + enter : 현재창 단일창</p></li></ul><h2 id="1-3-코드-관련-단축키">1.3.코드 관련 단축키</h2><ul><li><p>option(⌥) + 좌우 방향키 : 한단어씩 이동</p></li><li><p>option(⌥) + 상하 방향키 : 이동문단의 끝</p></li><li><p>command(⌘) + 방향키 : 방향의 끝으로 이동</p></li><li><p>command(⌘) + ] or tab: 코드 밀어내기</p></li><li><p>command(⌘) + [ or  shift(⇧) + tab  : 코드 당겨오기</p></li><li><p>control(⌃) + i : 코드 자동정렬</p></li><li><p>control(⌃) + command(⌘) + e : 같은 이름의 변수를 한번에 수정</p></li><li><p>shift(⇧) + command(⌘) + o : 프로젝트 내 검색</p></li><li><p>command(⌘) + e : 저장</p></li><li><p>command(⌘) + g : 저장한것 찾기</p></li><li><p>command(⌘) + l : 입력 line 으로 이동</p></li><li><p>command(⌘) + option(⌥) + 좌우 방형키 : 함수 접기</p></li><li><p>command(⌘) + control(⌃) + spacebar :  이모티콘</p></li><li><p>option(⌥) + 프로퍼티 or 메서드 클릭 : 간단설명</p></li><li><p>command(⌘) + control(⌃) + 프로퍼티 or 메서드 클릭 : 선언지점으로 이동</p></li></ul><h2 id="1-4-시뮬레이터-관련-단축키">1.4.시뮬레이터 관련 단축키</h2><ul><li><p>command(⌘) + k : 키보드 보이기</p></li><li><p>command(⌘) + 좌우 방향키 : 화면 회전</p></li><li><p>command(⌘) + 상하 방향키 : 볼륨키</p></li><li><p>option(⌥) + command(⌘) : 이중 터치(줌 인 아웃)</p></li><li><p>command(⌘) + shift(⇧) + h : 홈키</p></li><li><p>command(⌘) + shift(⇧) + h * 2: 백그라운드 앱보기</p></li><li><p>command(⌘) + s : 스크린샷</p></li></ul><blockquote><h2 id="Reference-⚑">Reference ⚑</h2><p><a href="https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/xcode_help-command_shortcuts/MenuCommands/MenuCommands014.html" target="_blank" rel="noopener">Menu Command Shortcuts (By Menu)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>코드베이스 초기 프로젝트 설정</title>
      <link href="/2020/05/01/Xcode/xcode-CodeProjectSetting/"/>
      <url>/2020/05/01/Xcode/xcode-CodeProjectSetting/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Xcode</span><span class="label label-info">iOS</span><span class="label label-info">Swift</span><span class="label label-info">CodeSetting</span><h1>1.코드베이스 초기 프로젝트 설정</h1><p>iOS개발을 할때 스토리보드를 사용하지 않고 코드로만 개발할때의 기초 설정, iOS 13이상의 버전을 사용할 경우 SceneDelegate.swift를 사용할 떄도 있다.</p><h2 id="1-1-프로젝트-생성">1.1.프로젝트 생성</h2><p>NewProjcet &gt; Single View App &gt; Next</p><center><img width="100%" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80729834-c4db5680-8b43-11ea-9f30-9760b5d15c34.png"></center><p>Option seting &gt; Next &gt; Create</p><center><img width="100%" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80730065-1257c380-8b44-11ea-806c-ea0e636e813a.png"></center><h2 id="1-2-SceneDelegate-swift-삭제">1.2.SceneDelegate.swift 삭제</h2><p><em>삭제전</em></p><center><img width="50%" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80730430-8abe8480-8b44-11ea-8d8e-f251a98cb094.png"></center><p><em>삭제후</em></p><center><img width="50%" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80730752-eee14880-8b44-11ea-8581-a762d6f5ced3.png"></center><h2 id="1-3-AppDelegate-swift-파일-수정">1.3.AppDelegate.swift 파일 수정</h2><p><em>iOS 12 이하 - AppDelegate.swift 일 때</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">        window?.rootViewController = <span class="type">ViewController</span>()</span><br><span class="line">        window?.backgroundColor = .systemBackground</span><br><span class="line">        window?.makeKeyAndVisible()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UIWindow(frame: UIScreen.main.bounds)</code>를 통하여 해당 기기의 완전한 크기를 <code>window</code>에 할당한 후에 이를 <code>ViewController()</code>롲 <code>rootViewController</code>를 지정해 우리가 만들 앱의 시작 화면을 만들어 준다.<br>다음으로 백그라운드 컬러를 <code>.systemBackground</code>로 지정해 주는데, 다크모드를 지원한다면 시스템 컬러를 사용해야 하기 때문이다.<br>그리고 마지막으로 <code>window?.makeKeyAndVisible()</code>은 만든 윈도우에서 키보드의 입력을 받을 수 있게끔 한다.</p><p><em>iOS 13 이상 - SceneDelegate.swift 일 때</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scene</span><span class="params">(<span class="number">_</span> scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line">        window = <span class="type">UIWindow</span>(windowScene: windowScene)</span><br><span class="line">        window?.rootViewController = <span class="type">ViewController</span>()</span><br><span class="line">        window?.frame = <span class="type">UIScreen</span>.main.bounds</span><br><span class="line">        window?.backgroundColor = .systemBackground</span><br><span class="line">        window?.makeKeyAndVisible()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 두개의 코드는 동일한 동작을 하는 코드로, 스토리보드를 이용하지 않을 떄 초기 <code>window</code>를 생성하고, <code>ViewController</code>를 전달하는 코드이다.</p><p>iOS12 이하에서는 <code>AppDelegate.swit</code> iOS13이상에서는 <code>SceneDelegate.swift</code> 를 사용하기 위해서는 다음과 같이 설정해 주면 된다.</p><p><em>AppDelegate.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;   </span><br><span class="line">    <span class="keyword">if</span> #available(iOS <span class="number">13.0</span>, *) &#123; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">        window?.rootViewController = <span class="type">RootViewControllerGenerator</span>.make()</span><br><span class="line">        window?.makeKeyAndVisible()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>SceneDelegate.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@available</span> (iOS <span class="number">13.0</span>, *)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SceneDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIWindowSceneDelegate</span> </span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scene</span><span class="params">(<span class="number">_</span> scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> windowScene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;        </span><br><span class="line">    window = <span class="type">UIWindow</span>(windowScene: windowScene)</span><br><span class="line">    window?.rootViewController = <span class="type">RootViewControllerGenerator</span>.make()</span><br><span class="line">    window?.makeKeyAndVisible()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이처럼 <code>available</code>을 사용하여 iOS버전별로 나눌 수 있다.</p><h2 id="1-4-info-plist-수정">1.4.info.plist 수정</h2><p><em>Application Scene Manifest 제거</em></p><center><img width="100%" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80731294-ac6c3b80-8b45-11ea-824a-32a39e1b9f23.png"></center><p>프로젝트를 생성하면 기본적으로 메인화면을 같이 만들어진 Main.storyboard로 설정하는데 이를 해제한다.</p>]]></content>
      
      
      <categories>
          
          <category> Xcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>메뉴 주문리스트</title>
      <link href="/2020/05/01/Practice/practice-OrderList/"/>
      <url>/2020/05/01/Practice/practice-OrderList/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Practice</span><span class="label label-info">iOS</span><span class="label label-info">Swift</span><span class="label label-info">OrderList</span><h1>1.메뉴 주문리스트</h1><p>스토리보드와 코드를 사용하여 메뉴를 주문하는 앱 제작</p><center><img width="333" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80898103-7512b000-8d3a-11ea-9c1a-9b10922f6089.png"></center><h2 id="1-1-구현-사항">1.1.구현 사항</h2><p><em>Development info</em></p><table><thead><tr><th style="text-align:center">Code</th><th style="text-align:center">Storyboard</th></tr></thead><tbody><tr><td style="text-align:center">✔</td><td style="text-align:center">✔</td></tr></tbody></table><ul><li>주문 버튼 터치 시 각 아이템에 대한 수량 증가</li><li>각 아이템별 주문 수량 증가에 따른 결제금액 증가</li><li>결제 진행 시 소지금액에서 결제금액만큼 차감 및 주문수량 초기화</li><li>소지금액이 결제금액보다 적은 경우 결제 불가 메시지 Alert 띄우기</li><li>초기화 버튼은 주문수량, 결제금액, 소지금액을 모두 초기화</li><li>초기화 버튼 이외에 한 번 올린 주문수량을 내리는 기능은 없음</li></ul><h3 id="1-1-1-코드-구현부분">1.1.1.코드 구현부분</h3><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">var</span> firstMenuCountLabel: <span class="type">UILabel!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">var</span> secondMenuCountLabel: <span class="type">UILabel!</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">var</span> thirdMenuCountLabel: <span class="type">UILabel!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> 소지금: <span class="type">Int</span> = <span class="number">70000</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            amountNum.text = <span class="string">"\(String(소지금))원"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> 결제금액: <span class="type">Int</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            paymentNum.text = <span class="string">"\(String(결제금액))원"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> countFirstMenu: <span class="type">Int</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            firstMenuCountLabel.text = <span class="type">String</span>(countFirstMenu)</span><br><span class="line">            결제금액 += <span class="number">5000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> countSecondMenu: <span class="type">Int</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            secondMenuCountLabel.text = <span class="type">String</span>(countSecondMenu)</span><br><span class="line">            결제금액 += <span class="number">6000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> countThirdMenu: <span class="type">Int</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            thirdMenuCountLabel.text = <span class="type">String</span>(countThirdMenu)</span><br><span class="line">            결제금액 += <span class="number">12000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> menu = <span class="type">UILabel</span>()</span><br><span class="line">    <span class="keyword">let</span> price = <span class="type">UILabel</span>()</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">count</span> = <span class="type">UILabel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> amount = <span class="type">UILabel</span>()</span><br><span class="line">    <span class="keyword">let</span> payment = <span class="type">UILabel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> amountNum = <span class="type">UILabel</span>()</span><br><span class="line">    <span class="keyword">let</span> paymentNum = <span class="type">UILabel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> resetButton = <span class="type">UIButton</span>()</span><br><span class="line">    <span class="keyword">let</span> paymentButton = <span class="type">UIButton</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="type">MenuLabel</span>()</span><br><span class="line">        calculationLabel()</span><br><span class="line">        resetButtonFunc()</span><br><span class="line">        paymentButtonFunc()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">foundationLabel</span><span class="params">(<span class="keyword">for</span> label: UILabel, text: String, frame: CGRect, bgColor: UIColor, textAligen: NSTextAlignment)</span></span> &#123;</span><br><span class="line">        label.text = text</span><br><span class="line">        label.frame = frame</span><br><span class="line">        label.textAlignment = .center</span><br><span class="line">        label.backgroundColor = bgColor</span><br><span class="line">        label.textAlignment = textAligen</span><br><span class="line">        </span><br><span class="line">        view.addSubview(label)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">MenuLabel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pointX = view.center.x</span><br><span class="line">        <span class="built_in">print</span>(view.center.x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> firstLabelPoint = <span class="type">CGRect</span>(x: pointX - <span class="number">200</span>, y: <span class="number">50</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">let</span> secondLabelPoint = <span class="type">CGRect</span>(x: pointX - <span class="number">100</span>, y: <span class="number">50</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">        <span class="keyword">let</span> thiredLabelPoint = <span class="type">CGRect</span>(x: pointX, y: <span class="number">50</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        foundationLabel(<span class="keyword">for</span>: menu, text: <span class="string">"메뉴"</span>, frame: firstLabelPoint, bgColor: .white, textAligen: .center)</span><br><span class="line">        foundationLabel(<span class="keyword">for</span>: price, text: <span class="string">"가격"</span>, frame: secondLabelPoint, bgColor: .white, textAligen: .center)</span><br><span class="line">        foundationLabel(<span class="keyword">for</span>: <span class="built_in">count</span>, text: <span class="string">"수량"</span>, frame: thiredLabelPoint, bgColor: .white, textAligen: .center)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">calculationLabel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pointX = view.center.x</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> firstLabelPoint = <span class="type">CGRect</span>(x: pointX - <span class="number">200</span>, y: <span class="number">400</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">        <span class="keyword">let</span> firstLabelRightPoint = <span class="type">CGRect</span>(x: pointX - <span class="number">80</span>, y: <span class="number">400</span>, width: <span class="number">150</span>, height: <span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> secondLabelPoint = <span class="type">CGRect</span>(x: pointX - <span class="number">200</span>, y: <span class="number">465</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">        <span class="keyword">let</span> secondLabelRightPoint = <span class="type">CGRect</span>(x: pointX - <span class="number">80</span>, y: <span class="number">465</span>, width: <span class="number">150</span>, height: <span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        foundationLabel(<span class="keyword">for</span>: amount, text: <span class="string">"소지금"</span>, frame: firstLabelPoint, bgColor: .systemGreen, textAligen: .center)</span><br><span class="line">        foundationLabel(<span class="keyword">for</span>: payment, text: <span class="string">"결제금액"</span>, frame: secondLabelPoint, bgColor: .systemOrange, textAligen: .center)</span><br><span class="line">        foundationLabel(<span class="keyword">for</span>: amountNum, text: <span class="string">"\(String(소지금))원"</span>, frame: firstLabelRightPoint, bgColor: .systemGreen, textAligen: .<span class="keyword">right</span>)</span><br><span class="line">        foundationLabel(<span class="keyword">for</span>: paymentNum, text: <span class="string">"\(String(결제금액))원"</span>, frame: secondLabelRightPoint, bgColor: .systemOrange, textAligen: .<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">resetButtonFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pointX = view.center.x</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> buttonPoint = <span class="type">CGRect</span>(x: pointX + <span class="number">100</span>, y: <span class="number">400</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        resetButton.setTitle(<span class="string">"초기화"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">        resetButton.backgroundColor = .black</span><br><span class="line">        resetButton.frame = buttonPoint</span><br><span class="line">        resetButton.addTarget(<span class="keyword">self</span>, action: #selector(resetAction), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">        </span><br><span class="line">        view.addSubview(resetButton)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">paymentButtonFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pointX = view.center.x</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> buttonPoint = <span class="type">CGRect</span>(x: pointX + <span class="number">100</span>, y: <span class="number">465</span>, width: <span class="number">100</span>, height: <span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        paymentButton.setTitle(<span class="string">"결제"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">        paymentButton.backgroundColor = .black</span><br><span class="line">        paymentButton.frame = buttonPoint</span><br><span class="line">        paymentButton.addTarget(<span class="keyword">self</span>, action: #selector(paymentAction), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">        </span><br><span class="line">        view.addSubview(paymentButton)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">resetAction</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Enter Reset"</span>)</span><br><span class="line">        <span class="built_in">print</span>(countFirstMenu)</span><br><span class="line">        countFirstMenu = <span class="number">0</span></span><br><span class="line">        countSecondMenu = <span class="number">0</span></span><br><span class="line">        countThirdMenu = <span class="number">0</span></span><br><span class="line">        결제금액 = <span class="number">0</span></span><br><span class="line">        소지금 = <span class="number">70000</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">paymentAction</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Enter Payment"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> paymentFailAlertController = <span class="type">UIAlertController</span>(title: <span class="string">"소지금이 부족합니다."</span>, message: <span class="string">"총 결제금액은 \(String(결제금액))이며, 결제시 부족한 금액은 \(String(결제금액-소지금))입니다."</span>, preferredStyle: .alert)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> paymentSuccessAlertController = <span class="type">UIAlertController</span>(title: <span class="string">"결제하기"</span>, message: <span class="string">"총 결제금액은 \(String(결제금액))입니다."</span>, preferredStyle: .alert)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> paymentSameAlertController = <span class="type">UIAlertController</span>(title: <span class="string">"결제하기"</span>, message: <span class="string">"총 결제금액은 \(String(결제금액))입니다."</span>, preferredStyle: .alert)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> 결제금액 &gt; 소지금&#123;</span><br><span class="line">            present(paymentFailAlertController, animated: <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">let</span> okAction = <span class="type">UIAlertAction</span>(title: <span class="string">"확인"</span>, style: .<span class="keyword">default</span>) &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> action <span class="keyword">in</span> [okAction] &#123;</span><br><span class="line">                paymentFailAlertController.addAction(action)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> 결제금액 &lt; 소지금&#123;</span><br><span class="line">            present(paymentSuccessAlertController, animated: <span class="literal">true</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> cancelAction = <span class="type">UIAlertAction</span>(title: <span class="string">"취소"</span>, style: .cancel) &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> okAction = <span class="type">UIAlertAction</span>(title: <span class="string">"확인"</span>, style: .<span class="keyword">default</span>) &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.소지금 = <span class="keyword">self</span>.소지금 - <span class="keyword">self</span>.결제금액</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">self</span>.countFirstMenu = <span class="number">0</span></span><br><span class="line">                <span class="keyword">self</span>.countSecondMenu = <span class="number">0</span></span><br><span class="line">                <span class="keyword">self</span>.countThirdMenu = <span class="number">0</span></span><br><span class="line">                <span class="keyword">self</span>.결제금액 = <span class="number">0</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="keyword">self</span>.결제금액)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> action <span class="keyword">in</span> [okAction, cancelAction] &#123;</span><br><span class="line">                paymentSuccessAlertController.addAction(action)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> 결제금액 == 소지금 &#123;</span><br><span class="line">            present(paymentSameAlertController, animated: <span class="literal">true</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> cancelAction = <span class="type">UIAlertAction</span>(title: <span class="string">"취소"</span>, style: .cancel) &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> okAction = <span class="type">UIAlertAction</span>(title: <span class="string">"확인"</span>, style: .<span class="keyword">default</span>) &#123;<span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.소지금 = <span class="keyword">self</span>.소지금 - <span class="keyword">self</span>.결제금액</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">self</span>.countFirstMenu = <span class="number">0</span></span><br><span class="line">                <span class="keyword">self</span>.countSecondMenu = <span class="number">0</span></span><br><span class="line">                <span class="keyword">self</span>.countThirdMenu = <span class="number">0</span></span><br><span class="line">                <span class="keyword">self</span>.결제금액 = <span class="number">0</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="keyword">self</span>.결제금액)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> action <span class="keyword">in</span> [okAction, cancelAction] &#123;</span><br><span class="line">                paymentSameAlertController.addAction(action)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">orderFirstMenu</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"1st"</span>)</span><br><span class="line">        countFirstMenu += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">orderSecondMenu</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"2nd"</span>)</span><br><span class="line">        countSecondMenu += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">orderThirdMenu</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"3th"</span>)</span><br><span class="line">        countThirdMenu += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-스토리보드-구현부분">1.1.2.스토리보드 구현부분</h3><p><em>Main.storyboard</em></p><center><img width="100%" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80898036-9fb03900-8d39-11ea-815a-a24dbcd1ec53.png"></center><h3 id="1-2-1-코드-구현부분">1.2.1.코드 구현부분</h3><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">UI</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> containerHeight: <span class="type">CGFloat</span> = <span class="number">40</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> displayLabelWidth: <span class="type">CGFloat</span> = <span class="number">140</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> labelWidth: <span class="type">CGFloat</span> = <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// MARK: IBOutlets</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> 짜장면amountLabel: <span class="type">UILabel!</span></span><br><span class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> 짬뽕amountLabel: <span class="type">UILabel!</span></span><br><span class="line">  <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> 탕수육amountLabel: <span class="type">UILabel!</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// MARK: Properties</span></span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">MenuItem</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> 짜장면, 짬뽕, 탕수육</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> 주문수량dict: [<span class="type">MenuItem</span>: <span class="type">Int</span>] = [</span><br><span class="line">    <span class="type">MenuItem</span>.짜장면: <span class="number">0</span>,</span><br><span class="line">    <span class="type">MenuItem</span>.짬뽕: <span class="number">0</span>,</span><br><span class="line">    <span class="type">MenuItem</span>.탕수육: <span class="number">0</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">let</span> menuItemCostArr = [<span class="number">5_000</span>, <span class="number">6_000</span>, <span class="number">12_000</span>]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> 소지금displayLabel = <span class="type">UILabel</span>()</span><br><span class="line">  <span class="keyword">var</span> 소지금 = <span class="number">70_000</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123; 소지금displayLabel.text = <span class="string">"\(소지금)원"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> 결제금액displayLabel = <span class="type">UILabel</span>()</span><br><span class="line">  <span class="keyword">var</span> 결제금액 = <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">didSet</span> &#123; 결제금액displayLabel.text = <span class="string">"\(결제금액)원"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// MARK: View Life Cycle</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    setupAdditionalViews()</span><br><span class="line">    initializeData()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// MARK: Setup Views</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">setupAdditionalViews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    setup소지금views()</span><br><span class="line">    setup결제금액views()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">setup</span>소지금<span class="title">views</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 컨테이너</span></span><br><span class="line">    <span class="keyword">let</span> 소지금containerView = <span class="type">UIView</span>()</span><br><span class="line">    소지금containerView.frame = <span class="type">CGRect</span>(</span><br><span class="line">      x: <span class="number">20</span>, y: <span class="number">350</span>, width: view.frame.width - <span class="number">40</span>, height: <span class="type">UI</span>.containerHeight</span><br><span class="line">    )</span><br><span class="line">    view.addSubview(소지금containerView)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 콘텐츠</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> 소지금label = <span class="type">UILabel</span>()</span><br><span class="line">    소지금label.frame = <span class="type">CGRect</span>(</span><br><span class="line">      x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">UI</span>.labelWidth, height: <span class="type">UI</span>.containerHeight</span><br><span class="line">    )</span><br><span class="line">    소지금label.text = <span class="string">"소지금"</span></span><br><span class="line">    소지금label.textAlignment = .center</span><br><span class="line">    소지금label.backgroundColor = .green</span><br><span class="line">    소지금label.font = <span class="type">UIFont</span>.preferredFont(forTextStyle: .title3)</span><br><span class="line">    소지금containerView.addSubview(소지금label)</span><br><span class="line">    </span><br><span class="line">    소지금displayLabel.frame = <span class="type">CGRect</span>(</span><br><span class="line">      x: 소지금label.frame.maxX + <span class="number">10</span>, y: <span class="number">0</span>,</span><br><span class="line">      width: <span class="type">UI</span>.displayLabelWidth, height: <span class="type">UI</span>.containerHeight</span><br><span class="line">    )</span><br><span class="line">    소지금displayLabel.backgroundColor = .green</span><br><span class="line">    소지금displayLabel.textAlignment = .<span class="keyword">right</span></span><br><span class="line">    소지금displayLabel.font = <span class="type">UIFont</span>.preferredFont(forTextStyle: .title3)</span><br><span class="line">    소지금containerView.addSubview(소지금displayLabel)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> 초기화button = <span class="type">UIButton</span>()</span><br><span class="line">    초기화button.frame = <span class="type">CGRect</span>(</span><br><span class="line">      x: 소지금displayLabel.frame.maxX + <span class="number">20</span>, y: <span class="number">0</span>,</span><br><span class="line">      width: <span class="type">UI</span>.labelWidth, height: <span class="type">UI</span>.containerHeight</span><br><span class="line">    )</span><br><span class="line">    초기화button.backgroundColor = .black</span><br><span class="line">    초기화button.setTitle(<span class="string">"초기화"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">    초기화button.setTitleColor(.white, <span class="keyword">for</span>: .normal)</span><br><span class="line">    초기화button.addTarget(<span class="keyword">self</span>, action: #selector(initializeData), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">    소지금containerView.addSubview(초기화button)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">setup</span>결제금액<span class="title">views</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> 소지금maxYOffset = 소지금displayLabel.superview!.frame.maxY</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 컨테이너</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> 결제금액containerView = <span class="type">UIView</span>()</span><br><span class="line">    결제금액containerView.frame = <span class="type">CGRect</span>(</span><br><span class="line">      x: <span class="number">20</span>, y: 소지금maxYOffset + <span class="number">10</span>,</span><br><span class="line">      width: view.frame.width - <span class="number">40</span>, height: <span class="type">UI</span>.containerHeight</span><br><span class="line">    )</span><br><span class="line">    view.addSubview(결제금액containerView)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 콘텐츠</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> 결제금액label = <span class="type">UILabel</span>()</span><br><span class="line">    결제금액label.frame = <span class="type">CGRect</span>(</span><br><span class="line">      x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">UI</span>.labelWidth, height: <span class="type">UI</span>.containerHeight</span><br><span class="line">    )</span><br><span class="line">    결제금액label.text = <span class="string">"결제금액"</span></span><br><span class="line">    결제금액label.textAlignment = .center</span><br><span class="line">    결제금액label.backgroundColor = .orange</span><br><span class="line">    결제금액label.font = <span class="type">UIFont</span>.preferredFont(forTextStyle: .title3)</span><br><span class="line">    결제금액containerView.addSubview(결제금액label)</span><br><span class="line">    </span><br><span class="line">    결제금액displayLabel.frame = <span class="type">CGRect</span>(</span><br><span class="line">      x: 결제금액label.frame.maxX + <span class="number">10</span>, y: <span class="number">0</span>,</span><br><span class="line">      width: <span class="type">UI</span>.displayLabelWidth, height: <span class="type">UI</span>.containerHeight</span><br><span class="line">    )</span><br><span class="line">    결제금액displayLabel.textAlignment = .<span class="keyword">right</span></span><br><span class="line">    결제금액displayLabel.backgroundColor = .orange</span><br><span class="line">    결제금액displayLabel.font = <span class="type">UIFont</span>.preferredFont(forTextStyle: .title3)</span><br><span class="line">    결제금액containerView.addSubview(결제금액displayLabel)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> 결제button = <span class="type">UIButton</span>()</span><br><span class="line">    결제button.frame = <span class="type">CGRect</span>(</span><br><span class="line">      x: 결제금액displayLabel.frame.maxX + <span class="number">20</span>, y: <span class="number">0</span>,</span><br><span class="line">      width: <span class="type">UI</span>.labelWidth, height: <span class="type">UI</span>.containerHeight</span><br><span class="line">    )</span><br><span class="line">    결제button.backgroundColor = .black</span><br><span class="line">    결제button.setTitle(<span class="string">"결제"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">    결제button.setTitleColor(.white, <span class="keyword">for</span>: .normal)</span><br><span class="line">    결제button.addTarget(<span class="keyword">self</span>, action: #selector(didTapPaymentButton(<span class="number">_</span>:)), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">    결제금액containerView.addSubview(결제button)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// MARK: - Action</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 주문</span></span><br><span class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapOrderButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> item = <span class="type">MenuItem</span>(rawValue: sender.tag),</span><br><span class="line">      <span class="keyword">let</span> amount = 주문수량dict[item]</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    결제금액 += menuItemCostArr[sender.tag]</span><br><span class="line">    주문수량dict[item] = amount + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> labels = [짜장면amountLabel, 짬뽕amountLabel, 탕수육amountLabel]</span><br><span class="line">    labels[sender.tag]?.text = <span class="string">"\(amount + 1)"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 결제</span></span><br><span class="line">  <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">didTapPaymentButton</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> 소지금 &gt;= 결제금액 &#123;</span><br><span class="line">      showAlert(</span><br><span class="line">        title: <span class="string">"결제하기"</span>,</span><br><span class="line">        message: <span class="string">"총 결제금액은 \(결제금액)원입니다."</span>,</span><br><span class="line">        actions: [</span><br><span class="line">          <span class="type">UIAlertAction</span>(title: <span class="string">"확인"</span>, style: .<span class="keyword">default</span>) &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> temp = <span class="keyword">self</span>.소지금 - <span class="keyword">self</span>.결제금액</span><br><span class="line">            <span class="keyword">self</span>.initializeData()</span><br><span class="line">            <span class="keyword">self</span>.소지금 = temp</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="type">UIAlertAction</span>(title: <span class="string">"취소"</span>, style: .cancel)</span><br><span class="line">        ]</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      showAlert(</span><br><span class="line">        title: <span class="string">"소지금이 부족합니다"</span>,</span><br><span class="line">        actions: [<span class="type">UIAlertAction</span>(title: <span class="string">"확인"</span>, style: .<span class="keyword">default</span>)]</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Alert</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">showAlert</span><span class="params">(title: String, message: String? = <span class="literal">nil</span>, actions: [UIAlertAction])</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> alertController = <span class="type">UIAlertController</span>(</span><br><span class="line">      title: title, message: message, preferredStyle: .alert</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">for</span> action <span class="keyword">in</span> actions &#123;</span><br><span class="line">      alertController.addAction(action)</span><br><span class="line">    &#125;</span><br><span class="line">    present(alertController, animated: <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 초기화</span></span><br><span class="line">  <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">initializeData</span><span class="params">()</span></span> &#123;</span><br><span class="line">    소지금 = <span class="number">70_000</span></span><br><span class="line">    결제금액 = <span class="number">0</span></span><br><span class="line">    짜장면amountLabel.text = <span class="string">"0"</span></span><br><span class="line">    짬뽕amountLabel.text = <span class="string">"0"</span></span><br><span class="line">    탕수육amountLabel.text = <span class="string">"0"</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> 주문수량dict.keys &#123;</span><br><span class="line">      주문수량dict[key] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 상속을 이용할 때 ]</span></span><br><span class="line"><span class="comment">//class MenuItem &#123;</span></span><br><span class="line"><span class="comment">//  let name: String</span></span><br><span class="line"><span class="comment">//  let cost: Int</span></span><br><span class="line"><span class="comment">//  init(name: String, cost: Int) &#123;</span></span><br><span class="line"><span class="comment">//    self.name = name</span></span><br><span class="line"><span class="comment">//    self.cost = cost</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//class 짜장면: MenuItem &#123;&#125;</span></span><br><span class="line"><span class="comment">//class 짬뽕: MenuItem &#123;&#125;</span></span><br><span class="line"><span class="comment">//class 탕수육: MenuItem &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 프로토콜을 이용할 때 ]</span></span><br><span class="line"><span class="comment">//protocol MenuItem &#123;</span></span><br><span class="line"><span class="comment">//  var name: String &#123; get &#125;</span></span><br><span class="line"><span class="comment">//  var cost: Int &#123; get &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-스토리보드-구현부분">1.2.2.스토리보드 구현부분</h3><p><em>Main.storyboard</em></p><center><img width="100%" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80960885-bbeccc80-8e44-11ea-990a-dbe5a1fac89a.png"></center>]]></content>
      
      
      <categories>
          
          <category> Practice </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>그리드 레이아웃</title>
      <link href="/2020/04/29/Practice/practice-GridLayout/"/>
      <url>/2020/04/29/Practice/practice-GridLayout/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Practice</span><span class="label label-info">iOS</span><span class="label label-info">Swift</span><span class="label label-info">GridLayout</span><h1>1.그리드 레이아웃(Grid Layout)</h1><p>우선 그리드 레이아웃(Grid Layout)이란, 격자무늬란 뜻으로 격자 모양의 표에 차일드를 배치한다.셀의 위치와 크기를 다양하게 변형할 수 있고, 셀끼리 병합도 가능해 응용 가능성이 많다.</p><center><img width="315" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/80662586-98d0be80-8acc-11ea-8626-e7c82865124c.png"></center><h2 id="1-1-Development-info">1.1.Development info</h2><table><thead><tr><th style="text-align:center">Code</th><th style="text-align:center">Storyboard</th></tr></thead><tbody><tr><td style="text-align:center">✔</td><td style="text-align:center"></td></tr></tbody></table><h3 id="1-1-1-width와-height가-고정인-그리드">1.1.1.width와 height가 고정인 그리드</h3><p><em>ViewController.swift</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> numberOfApp: <span class="type">Int</span> = <span class="number">16</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> xNum: <span class="type">CGFloat</span> = <span class="number">50</span></span><br><span class="line">        <span class="keyword">var</span> yNum: <span class="type">CGFloat</span> = <span class="number">50</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...numberOfApp &#123;</span><br><span class="line">            gridButton(defaultX: xNum, defaultY: yNum)</span><br><span class="line">            appTitleLabel(defaultX: xNum, defaultY: yNum )</span><br><span class="line">            </span><br><span class="line">            xNum = i % <span class="number">3</span> == <span class="number">0</span> ? <span class="number">50</span> : xNum + <span class="number">120</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">                yNum += <span class="number">120</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> itemLabel = <span class="type">UILabel</span>()</span><br><span class="line">    <span class="keyword">let</span> titleLabel = <span class="type">UILabel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">labelAttributes</span><span class="params">(label: UILabel, title: String, frame: CGRect, bgColor: UIColor)</span></span> &#123;</span><br><span class="line">        label.text = title</span><br><span class="line">        label.frame = frame</span><br><span class="line">        label.textAlignment = .center</span><br><span class="line">        label.textColor = .black</span><br><span class="line">        label.backgroundColor = bgColor</span><br><span class="line">        </span><br><span class="line">        view.addSubview(label)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gridButton</span><span class="params">(defaultX: CGFloat, defaultY: CGFloat)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> button = <span class="type">UIButton</span>(type: .system)</span><br><span class="line">        button.setTitle(<span class="string">"App"</span>, <span class="keyword">for</span>: .normal)</span><br><span class="line">        button.titleLabel?.font = .preferredFont(forTextStyle: .title3)</span><br><span class="line">        button.sizeToFit()</span><br><span class="line">        button.center = view.center</span><br><span class="line">        button.addTarget(<span class="keyword">self</span>, action: #selector(btnAction(<span class="number">_</span>:)), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">        button.frame = <span class="type">CGRect</span>(x: defaultX, y: defaultY, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line">        button.backgroundColor = getRandomColor()</span><br><span class="line">        button.layer.cornerRadius = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">        view.addSubview(button)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">btnAction</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// gridButton action</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">appTitleLabel</span><span class="params">(defaultX: CGFloat, defaultY: CGFloat)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> appTitle = <span class="type">UILabel</span>()</span><br><span class="line">        </span><br><span class="line">        labelAttributes(label: appTitle, title: <span class="string">"Title"</span>, frame: <span class="type">CGRect</span>(x: defaultX, y: defaultY + <span class="number">80</span>, width: <span class="number">80</span>, height: <span class="number">20</span>), bgColor: .white)</span><br><span class="line"></span><br><span class="line">        view.addSubview(appTitle)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getRandomColor</span><span class="params">()</span></span> -&gt; <span class="type">UIColor</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> randomRed:<span class="type">CGFloat</span> = <span class="type">CGFloat</span>(drand48())</span><br><span class="line">        <span class="keyword">let</span> randomGreen:<span class="type">CGFloat</span> = <span class="type">CGFloat</span>(drand48())</span><br><span class="line">        <span class="keyword">let</span> randomBlue:<span class="type">CGFloat</span> = <span class="type">CGFloat</span>(drand48())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIColor</span>(red: randomRed, green: randomGreen, blue: randomBlue, alpha: <span class="number">1.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-결과">1.1.2.결과</h3><p><em>numberOfApp = 16</em><br><img width="315" alt="numberOfApp = 16" src="https://user-images.githubusercontent.com/45344633/80664258-404ff000-8ad1-11ea-8b5e-33fcf9068d1e.png"></p><h3 id="1-1-3-회고">1.1.3.회고</h3><p>초기에 생각했던것은 아이폰의 앱 아이콘을 떠올리고 개발을 진행하였는데, 원하는 개수를 입력하면 그것만큼에 앱을 그려주는 코드를 만들려고 하였다 x와 y의 좌표값이 고정적이여서 테스트한 시뮬레이터인 iPhone 11 Pro Max가 아닐때에는 조금 다른 UI를 보여준다.</p>]]></content>
      
      
      <categories>
          
          <category> Practice </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>랜덤 색상 표현</title>
      <link href="/2020/04/29/iOS/ios-RandomColor/"/>
      <url>/2020/04/29/iOS/ios-RandomColor/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">iOS</span><span class="label label-info">Swift</span><span class="label label-info">RandomColor</span><h1>1.랜덤 색상 표현</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandomColor</span><span class="params">()</span></span> -&gt; <span class="type">UIColor</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> randomRed:<span class="type">CGFloat</span> = <span class="type">CGFloat</span>(drand48())</span><br><span class="line">    <span class="keyword">let</span> randomGreen:<span class="type">CGFloat</span> = <span class="type">CGFloat</span>(drand48())</span><br><span class="line">    <span class="keyword">let</span> randomBlue:<span class="type">CGFloat</span> = <span class="type">CGFloat</span>(drand48())</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIColor</span>(red: randomRed, green: randomGreen, blue: randomBlue, alpha: <span class="number">1.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>간단한 랜덤 색상을 표현하기 위해서 rgb 값을 0 에서 1까지의 실수(double 타입)를 생성하는 drand48()값을 넣어주고 rgb를 Return한다.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>guard let과 if let의 차이</title>
      <link href="/2020/04/28/Using-Swift/using-GuardLet/"/>
      <url>/2020/04/28/Using-Swift/using-GuardLet/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">UsingSwift</span><span class="label label-info">Optional</span><span class="label label-info">guardlet</span><h1>1.guard let과 if let의 차이</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> <span class="built_in">count</span> = <span class="type">Int</span>(countLabel.text ?? <span class="string">""</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Using Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Frame과 Bounds</title>
      <link href="/2020/04/28/iOS/ios-FrameBounds/"/>
      <url>/2020/04/28/iOS/ios-FrameBounds/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">iOS</span><span class="label label-info">FrameBounds</span><h1>1.Frame과 Bounds</h1><h2 id="1-1-Frame">1.1.Frame</h2><ul><li>superview의 좌표계를 기반으로 해당 view에 대한 위치(좌표)와 사이즈를 나타내는 사각형</li><li>원점(0, 0)은 부모뷰(superview)의 시작 지점이며,</li><li>원점을 변경하면 자신의 위치가 이동하고 이에 따라 자신의 하위 뷰도 함께 움직임<br><code>The frame rectangle, which describes the view’s location and size in its superview’s coordinate system.</code></li></ul><h2 id="1-2-Bounds">1.2.Bounds</h2><ul><li>자기 자신의 좌표계를 기반으로 그 뷰의 위치와 사이즈를 표현하는 사각형</li><li>원점(0, 0)은 자체 뷰의 시작 지점이며, 원점을 변경하면 자신의 하위 뷰에만 영향을 줌<br><code>The bounds rectangle, which describes the view’s location and size in its own coordinate system.</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>오토 레이아웃 앵커(Auto layout Anchors)</title>
      <link href="/2020/04/28/iOS/ios-AutolayoutAnchors/"/>
      <url>/2020/04/28/iOS/ios-AutolayoutAnchors/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">iOS</span><span class="label label-info">AutoLayoutAnchors</span><h1>1.Autolayout Anchors</h1><p>스위프트에서 <code>Auto Layout</code>을 코드로 구현하기 위한 방법 중 하나인 <code>Autolayout Anchors</code>에 대해 알아보자.</p><h2 id="1-1-NSLayoutConstraint">1.1.NSLayoutConstraint</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creating constraints using NSLayoutConstraint</span></span><br><span class="line"><span class="type">NSLayoutConstraint</span>(item: subview,</span><br><span class="line">                    attribute: .leading,</span><br><span class="line">                    relatedBy: .<span class="built_in">equal</span>,</span><br><span class="line">                    toItem: view,</span><br><span class="line">                    attribute: .leadingMargin,</span><br><span class="line">                    multiplier: <span class="number">1.0</span>, constant: <span class="literal">true</span>).isActive = <span class="literal">true</span></span><br><span class="line"><span class="type">NSLayoutConstraint</span>(item: subview,</span><br><span class="line">                    attribute: .trailing,</span><br><span class="line">                    relatedBy: .<span class="built_in">equal</span>,</span><br><span class="line">                    toItem: view,</span><br><span class="line">                    attribute: .trailingMargin,</span><br><span class="line">                    multiplier: <span class="number">1.0</span>, constant: <span class="number">0.0</span>).isActive = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="1-2-NSLayoutAnchor">1.2.NSLayoutAnchor</h2><p>iOS 9.0이상에서 위의 Constraint를 2줄로 표현이 가능하다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">letmergins = view.layoutMarginsGuide</span><br><span class="line">    </span><br><span class="line">subview.leadingAnchor.constraint(eqaulTo: margins.leadingAnchor).isActive = <span class="literal">true</span></span><br><span class="line">subview.trailingAnchor.constraint(equalTo: margins.trailingAnchor).isActive = ture</span><br></pre></td></tr></table></figure><h2 id="1-3-Horizontal-Layout-Anchors">1.3.Horizontal Layout Anchors</h2><ul><li>View의 수평선, X축에 관련된 제약조건</li><li>NSLayoutXAxisAnchor클래스의 객체</li></ul><p><code>Leading anchor, Trailing anchor, Left anchor, Right anchor, Center-X anchor</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.leadingAnchor.constraint(equalTO: <span class="type">NSLayoutAnchor</span>&lt;<span class="type">NSLayoutXAxisAnchor</span>&gt;)</span><br></pre></td></tr></table></figure><h2 id="1-4-Vertical-Layout-Anchors">1.4.Vertical Layout Anchors</h2><ul><li>view의 수직선, Y축에 괸련된 제약조건</li><li>NSLayoutYAxisAnchor클래스의 객체</li></ul><p><code>Top anchor, Bottom anchor, Xenter-Y anchor, First baseline anchor, Last baseline anchor</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.topAnchor.constraint(equalTo: <span class="type">NSLayoutAnxhor</span>&lt;<span class="type">NSLayoutYAxistAnxhor</span>&gt;)</span><br></pre></td></tr></table></figure><h2 id="1-5-Dimension-Layout-Anchors">1.5.Dimension Layout Anchors</h2><ul><li>view의 크기 정의</li><li>NSLayoutDimension클래스의 객체</li></ul><p><code>Width anchor, Height anchor</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.widthAnchor.constraint(eqaulToConstant: <span class="type">CGFloat</span>)</span><br></pre></td></tr></table></figure><h2 id="1-6-Basic-Layout-Constraints">1.6.Basic Layout Constraints</h2><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82512955-90f4bf00-9b4c-11ea-83eb-68b576c06717.png"></center><h2 id="1-7-Dimension-Center-X-Y-Layout">1.7.Dimension &amp; Center X,Y Layout</h2><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82513061-ddd89580-9b4c-11ea-89d6-18d89931c70a.png"></center><h2 id="1-8-First-Last-Baseline-Constraints">1.8.First, Last Baseline Constraints</h2><center><img width="100%" style="max-width: 400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82513146-15dfd880-9b4d-11ea-8845-b0b081f038ec.png"></center>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS, viewController Life Cycle</title>
      <link href="/2020/04/28/iOS/ios-iOSLifeCycle%20copy/"/>
      <url>/2020/04/28/iOS/ios-iOSLifeCycle%20copy/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">iOS</span><span class="label label-info">LifeCycle</span><h1>1.Life Cycle</h1><p>iOS앱은 기본적으로 MVC(Model-View-Controller)라는 소프트웨어 디자인 패턴을 사용한다. 이 디자인 패턴의 중요한점은 데이터와 비즈니스 로직을 UI요소로부터 분리시켜주어 다른디바이스에도 같은 동작이 가능하게 해준다.</p><p><img src="https://user-images.githubusercontent.com/45344633/80566306-a6833700-8a2d-11ea-9700-78e3a08d2290.png" alt="image"></p><h2 id="1-1-Application-LifeCycle">1.1.Application LifeCycle</h2><p>iOS의 App인 UIKit App들의 각각의 상태에 대하여 알아보자.</p><center><img width="400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/81131337-cbbffa00-8f85-11ea-9d0e-d8a3657d9fa6.png"></center><h3 id="1-1-1-Not-running-Terminated">1.1.1.Not running (= Terminated)</h3><ul><li>Not Running 상태란, App을 실행하지 않은 상태로서 App이 실행되기 전 상태 또는 실행이 되었지만 System에 의해 종료된 상태이다.</li></ul><blockquote><p>The app has not been launched or was running but was terminated by the system.</p></blockquote><h3 id="1-1-2-Foreground">1.1.2.Foreground</h3><ul><li>App이 실행되어 사용자에게 보여지고 있는 상태이다.</li><li>오직 하나의 App만 Foreground상태를 가지며 Inactive와 active 두가지 상태로 나뉜다.</li></ul><h4 id="1-1-2-1-Inactive">1.1.2.1.Inactive</h4><ul><li>Foreground에서 App이 실행중이지만, 앱 상태 전환 등의 이유로 이벤트를 일시적으로 받지 못하는 상태</li><li>Foreground 상태에서 전화가 왔을때, 잠금상태, 멀티태스킹 스크린에서는 Inactive상태를 가진다.</li></ul><blockquote><p>The app is running in the foreground but is not receiving events. This might happen as a result of an interruption or because the app is transitioning to or from the background.</p></blockquote><h4 id="1-1-2-2-Active">1.1.2.2.Active</h4><ul><li>Foreground에서 App이 실행 중이며, 이벤트를 정상적으로 수신받을 수 있는 상태</li></ul><blockquote><p>The app is running in the foreground and currently receiving events. This is the normal mode for foreground apps.</p></blockquote><h3 id="1-1-3-Background">1.1.3.Background</h3><ul><li>Foreground상태에서 HomeScreen으로 이동한 상태</li><li>Background에서 앱이 실행 중인 상태 또는 Suspended상태로 넘어가기 직전 잠시 머무는 단계</li></ul><blockquote><p>The app is in the background and executing code. Most apps enter this state briefly on their way to being suspended. However, an app that requests extra execution time may remain in this state for a period of time.</p></blockquote><h3 id="1-1-4-Suspended">1.1.4.Suspended</h3><ul><li>App이 Background에 남아있으며, 메모리에는 남아있지만 어떤 코드도 수행하고 있지 않은 상태</li><li>메모리가 부족해지면 System에 의해 강제로 종료될 수 있는 상태</li></ul><blockquote><p>The app is in the background but is not executing code. The system moves apps to this state automatically and does not notify them before doing so. While suspended, an app remains in memory but does not execute any code. When a low-memory condition occurs, the system may purge suspended apps without notice to make more space for the foreground app.</p></blockquote><h2 id="1-2-viewController-LifeCycle">1.2.viewController LifeCycle</h2><p>App을 구성하고있는 View Controller에 대해 알아보자.</p><center><img width="400px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/81132604-0035b500-8f8a-11ea-8438-1b9c2843a09a.png"></center><h3 id="1-2-1-viewDidLoad">1.2.1.viewDidLoad</h3><ul><li>View에 대한 로드가 완료된 시점(메모리상에 저장됨)에 딱한번만 호출</li><li>View가 로드 되었다</li></ul><blockquote><p>Called after the controller’s view is loaded into memory.</p></blockquote><h3 id="1-2-2-viewWillAppear">1.2.2.viewWillAppear</h3><ul><li>View를 화면에 나타내기 직전에 호출</li><li>View가 나타날 것이다</li></ul><blockquote><p>Called after the title bar accessory view controller’s view has been loaded into memory is about to be added to the view hierarchy in the window.</p></blockquote><h3 id="1-2-3-viewDidAppear">1.2.3.viewDidAppear</h3><ul><li>View를 화면에 나타낸 직후 호출</li><li>View가 나타났다</li></ul><blockquote><p>Called when the title bar accessory view controller’s view is fully transitioned onto the screen.</p></blockquote><h3 id="1-2-4-viewWillDisappear">1.2.4.viewWillDisappear</h3><ul><li>View가 화면에서 사라지기 직전 호출</li><li>View가 사라질 것이다</li></ul><blockquote><p>Called when the view controller’s view is about to be removed from the view hierarchy in the window.</p></blockquote><h3 id="1-2-5-viewDidDisappear">1.2.5.viewDidDisappear</h3><ul><li>View가 화면에서 사라진 직후 호출</li><li>View가 사라졌다</li></ul><blockquote><p>Called after the title bar accessory view controller’s view is removed from the window’s view hierarchy.</p></blockquote><blockquote><h3 id="Reference-⚑">Reference ⚑</h3><p><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller" target="_blank" rel="noopener">UIViewController</a><br><a href="https://medium.com/cashwalk/ios-background-mode-9bf921f1c55b" target="_blank" rel="noopener">iOS Background Mode</a><br><a href="https://zeddios.tistory.com/43" target="_blank" rel="noopener">iOS ) View Controller의 생명주기(Life-Cycle)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>오토 레이아웃(AutoLayout)</title>
      <link href="/2020/04/27/iOS/ios-Autolayout/"/>
      <url>/2020/04/27/iOS/ios-Autolayout/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">iOS</span><span class="label label-info">AutoLayout</span><h1>1.오토 레이아웃(Auto Layout)</h1><p><em>오토 레이아웃이란 ?</em></p><ul><li>뷰에 주어진 제약조건에 따라 뷰의 크기와 위치를 동적으로 계산해 배치하는 것</li><li>외부 또는 내부의 변화에 동적으로 반응하여 유저 인터페이스 구성</li></ul><h2 id="1-1-적용시-변화-요소">1.1.적용시 변화 요소</h2><p><em>iOS에서의 유저 인터페이스 구성을 위한 3가지 주요 접근 방식</em></p><ul><li>Frame 기반의 프로그래밍 방식</li><li>Autoresizing masks</li><li>Auto Layout</li></ul><h3 id="1-1-1-외적-변화-요소-Extenral-Changes">1.1.1.외적 변화 요소 (Extenral Changes)</h3><ul><li>서로 다른 기기 및 스크린 크기</li><li>기기 회전</li><li>iPad / iPhone+ 등에서 SplitView로 진입하거나 빠져나올떄</li></ul><h3 id="1-1-2-내적-변화-요소-Internal-Changes">1.1.2.내적 변화 요소 (Internal Changes)</h3><ul><li>앱에서 보여지는 컨텐츠의 변화</li><li>국재화 지원(텍스트, 날짜와 숫자, RTL등)</li><li>Dynamic Type 지원(글꼴 크기)</li></ul><h2 id="1-2-Frame-Based-Layout">1.2.Frame-Based Layout</h2><p>프래임 기반의 프로그래밍 방식</p><ul><li>원점의 위치와 크기를 통해 그릴 영역 계산</li><li>가장 유연하며 빠른 성능</li><li>모든 뷰에 대해 개별적인 설정과 관리</li><li>동적인 변화에 대한 설계 및 디버그, 유지 관리에 많은 노력 필요</li></ul><center><img width="100%" style="max-width: 300px" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/82515227-b684c700-9b52-11ea-8591-fc00c6daacfb.png"></center>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UIViewController</title>
      <link href="/2020/04/27/iOS/ios-UIViewController/"/>
      <url>/2020/04/27/iOS/ios-UIViewController/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">iOS</span><span class="label label-info">FrameBounds</span><h1>1.UIViewController</h1><ul><li>ViewController의 부모 class</li><li>앱 구조의 뼈대</li><li>모든 앱에 반드시 하나 이상, 대부분 많은 수의 ViewController로 구성</li></ul><h2 id="1-1-View-Management">1.1.View Management</h2><p>뷰의 계층관리, 모든 뷰컨트롤러마다 RootView를 지니며, 화면에 표시하기 위해서는 해당 RootView계층애 속해야함.<br><img src="https://user-images.githubusercontent.com/45344633/82313483-61866b00-9a03-11ea-84df-25cb4ff68158.png" alt="image"></p><h2 id="1-2-Data-Marshaling">1.2.Data Marshaling</h2><p>MVC(Model-View-Controller)<br>자신이 관리하는 View와 Data간 중개 역할<br><img src="https://user-images.githubusercontent.com/45344633/82314198-6861ad80-9a04-11ea-90a9-28041adc507d.png" alt="image"></p><h2 id="1-3-UserInteraction">1.3.UserInteraction</h2><p>이벤트 처리</p><ul><li>뷰컨트롤러는 Responder객체: 직접 이벤트를 받아 처리 가능하나 일반적으로 지양</li><li>뷰가 그 자신의 터치 이벤트를 연관된 객체에 action메서드나 delegate로 전달</li></ul><h2 id="1-4-Resource-Management">1.4.Resource Management</h2><p>뷰컨트롤러가 생성한 모든 뷰와 객체들은 뷰컨트롤러의 책임<br>뷰컨츠롤러의 생명 주기에 따라 생성되었다가 자동 소멸되기도 하지만 ARC개념에 맞게 관리 필요<br>메모리 부족 시 didReceiveMemoryWarning메서드에서  꼭 유지하지 않아도 되는 자원들은 정리 필요</p><h2 id="1-5-Adaptivity">1.5.Adaptivity</h2><p>뷰컨트롤러라는 뷰의 표현을 책임지고, 현재 환경에 적절한 방법으로 적용되도록 할 책임을 가짐<br><img src="https://user-images.githubusercontent.com/45344633/82314897-719f4a00-9a05-11ea-9013-4167ee762b6a.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터 포맷의 형식(Date Format Symbol)</title>
      <link href="/2020/04/22/Foundation/Foundation-DateControl/"/>
      <url>/2020/04/22/Foundation/Foundation-DateControl/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Foundation</span><span class="label label-primary">Swift</span><span class="label label-info">DateFormatSymbol</span><h1>1.데이터 포맷의 형식(Date Format Symbol)</h1><p><strong>데이터 포맷의 심벌은 필드를 기준으로 년(Year), 월(Month), 주(week), 일(Day), 요일(Weekday), 시기(Period), 시간(Hour), 분(Minute), 초(Second), 지역(Zone)이 있다. 각 필드들의 심벌과 결과 의미를 알아보자.</strong></p><h2 id="1-1-년-Year">1.1.년(Year)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>yy</td><td>16</td><td>두 자리로 연도를 표시</td></tr><tr><td>yyyy</td><td>2016</td><td>네 자리로 연도를 표시</td></tr></tbody></table><h2 id="1-2-월-Month">1.2.월(Month)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>M</td><td>5</td><td>한 자리로 월을 표시</td></tr><tr><td>MM</td><td>05</td><td>두 자리로 월을 표시</td></tr><tr><td>MMM</td><td>Mar</td><td>Jan ~ December까지 3글자만 영문으로 월을 표시</td></tr><tr><td>MMMM</td><td>March</td><td>Jan ~ December까지 전체를 영문으로 월을 표시</td></tr></tbody></table><h2 id="1-3-주-Week">1.3.주(Week)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>w</td><td>6</td><td>1 ~ 52까지 연간 주 순서(week of year)를 표시</td></tr><tr><td>ww</td><td>13</td><td>01 ~ 52까지 연간 주 순서(week of year)를 표시</td></tr><tr><td>W</td><td>5</td><td>1 ~ 6까지 월간 주 순서(week of month)를 표시</td></tr></tbody></table><h2 id="1-4-일-Day">1.4.일(Day)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>d</td><td>8</td><td>1 ~ 31까지 일을 표시</td></tr><tr><td>dd</td><td>08</td><td>01 ~ 31까지 일을 표시</td></tr><tr><td>D</td><td>35</td><td>1 ~ 365까지 연간 일 순서(day of year)를 표시</td></tr><tr><td>DD</td><td>35</td><td>01 ~ 365까지 연간 일 순서(day of year)를 표시</td></tr><tr><td>DDD</td><td>035</td><td>001 ~ 365까지 연간 일 순서(day of year)를 표시</td></tr></tbody></table><h2 id="1-5-요일-Weekday">1.5.요일(Weekday)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>E, EE, EEE</td><td>Mon</td><td>Sun ~ Sat까지 3글자 요일 표시</td></tr><tr><td>EEEE</td><td>Monday</td><td>Sunday ~ Saturday까지 요일 전체 이름 표시</td></tr><tr><td>EEEEE</td><td>M</td><td>한 글자 약어 요일 표시</td></tr><tr><td>e</td><td>4</td><td>1 ~ 7까지 주간 날짜 순서 표시</td></tr><tr><td>ee</td><td>04</td><td>01 ~ 07까지 주간 날짜 순서 표시</td></tr></tbody></table><h2 id="1-6-시기-Period">1.6.시기(Period)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>a</td><td>PM</td><td>AM/PM 표시</td></tr></tbody></table><h2 id="1-7-시간-Hour">1.7.시간(Hour)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>h</td><td>3</td><td>1 ~ 12까지 시각을 표시</td></tr><tr><td>hh</td><td>03</td><td>01 ~ 12까지 시각을 표시</td></tr><tr><td>H</td><td>15</td><td>1 ~ 24까지 24시간 시각을 표시</td></tr><tr><td>HH</td><td>15</td><td>01 ~ 24까지 24시간 시각을 표시</td></tr></tbody></table><h2 id="1-8-분-Minute">1.8.분(Minute)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>m</td><td>36</td><td>0 ~ 59까지 분을 표시</td></tr><tr><td>mm</td><td>36</td><td>00 ~ 59까지 분을 표시</td></tr></tbody></table><h2 id="1-9-초-Second">1.9.초(Second)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>s</td><td>44</td><td>0 ~ 59까지 초를 표시</td></tr><tr><td>ss</td><td>44</td><td>00 ~ 59까지 초를 표시</td></tr></tbody></table><h2 id="1-10-지역-Zone">1.10.지역(Zone)</h2><table><thead><tr><th>심벌</th><th>결과</th><th>의미</th></tr></thead><tbody><tr><td>z</td><td>GMT+09:00</td><td>타임존 표시</td></tr><tr><td>Z</td><td>+0900</td><td>GMT 시간차 표시</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>마크다운(Markdown) 작성법</title>
      <link href="/2020/04/22/Foundation/Foundation-Markdown/"/>
      <url>/2020/04/22/Foundation/Foundation-Markdown/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Foundation</span><span class="label label-primary">Markdown</span><h1>1.마크다운(Markdown) 작성법</h1><h2 id="1-1-마크다운-이란">1.1.마크다운 이란 ?</h2><p><a href="http://whatismarkdown.com/" target="_blank" rel="noopener"><strong>Markdown</strong></a>은 텍스트 기반의 마크업언어로 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다.</p><h2 id="1-2-공통-마크다운-문법-Global-Syntex-🏝">1.2.공통 마크다운 문법(Global Syntex)🏝</h2><h3 id="1-2-1헤더-Header">1.2.1헤더(Header)</h3><pre><code># This is an H1 tag## This is an H2 tag### This is an H3 tag#### This is an H4 tag ##### This is an H5 tag###### This is an H6 tag</code></pre><h3 id="1-2-2-강조-Emphasis">1.2.2.강조(Emphasis)</h3><pre><code>*This text will be italic*_This will also be italic_**This text will be bold**__This will also be bold___You **can** combine them_</code></pre><p><em>적용 예</em></p><hr><p><em>This text will be italic</em><br><em>This will also be italic</em></p><p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p><p><em>You <strong>can</strong> combine them</em></p><hr><h3 id="1-2-3-리스트-List">1.2.3.리스트(List)</h3><p><em>Unordered 리스트</em></p><pre><code>* Item 1    * Item 2    * Item 2a    * Item 2b</code></pre><p><em>적용 예</em></p><hr><ul><li>Item 1<ul><li>Item 2</li><li>Item 2a</li><li>Item 2b</li></ul></li></ul><hr><p><em>Ordered 리스트</em></p><pre><code>1. Item 11. Item 21. Item 3   1. Item 3a   1. Item 3b</code></pre><p><em>적용 예</em></p><hr><ol><li>Item 1</li><li>Item 2</li><li>Item 3<ol><li>Item 3a</li><li>Item 3b</li></ol></li></ol><hr><h3 id="1-2-4-이미지-Images">1.2.4.이미지(Images)</h3><pre><code>![GitHub Logo](이미지 Url)Format: ![Alt Text](이미지 url)</code></pre><hr><p><img src="https://user-images.githubusercontent.com/45344633/75291822-54276d80-5866-11ea-94dd-2ab210ee2766.png" width="400px" height="100px" title="px(픽셀) 크기 설정" alt="RubberDuck"></img></p><hr><h3 id="1-2-5-링크-Links">1.2.5.링크(Links)</h3><pre><code>http://github.com - automatic![GitHub](http://github.com)</code></pre><p><em>적용 예</em></p><hr><p><a href="http://github.com" target="_blank" rel="noopener">http://github.com</a> - automatic!<br><a href="http://github.com" target="_blank" rel="noopener">GitHub</a></p><hr><h3 id="1-2-6-인용부호-Blockquotes">1.2.6.인용부호(Blockquotes)</h3><pre><code>As Kanye West said:&gt; We're living the future so&gt; the present is our past.</code></pre><p><em>적용 예</em></p><hr><p>As Kanye West said:</p><blockquote><p>We’re living the future so<br>the present is our past.</p></blockquote><hr><h3 id="1-2-7-인라인-코드-Inline-code">1.2.7.인라인 코드(Inline code)</h3><pre><code>&lt;addr&gt;에 적용된 부분이`&lt;addr&gt;` 인라인 코드 입니다.</code></pre><p><em>적용 예</em></p><hr><p>&lt;addr&gt;에 적용된 부분이<br><code>&lt;addr&gt;</code> 인라인 코드 입니다.</p><hr><h2 id="1-3-깃헙-마크다운-문법-Local-Syntex-🏖">1.3.깃헙 마크다운 문법(Local Syntex)🏖</h2><h3 id="1-3-1-구문-강조-Syntax-highlighting">1.3.1.구문 강조(Syntax highlighting)</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><em>적용 예</em></p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-3-2-작업-목록-Task-Lists">1.3.2.작업 목록(Task Lists)</h3><pre><code>- [x] @mentions, #refs, [links](), **formatting**, and &lt;del&gt;tags&lt;/del&gt; supported- [x] list syntax required (any unordered or ordered list supported)- [x] this is a complete item- [ ] this is an incomplete item</code></pre><p><em>적용 예</em></p><hr><ul><li>[x] @mentions, #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported</li><li>[x] list syntax required (any unordered or ordered list supported)</li><li>[x] this is a complete item</li><li>[ ] this is an incomplete item</li></ul><hr><h3 id="1-3-3-표-Tables">1.3.3.표(Tables)</h3><pre><code>첫번째 헤더 | 두번째 헤더------------ | -------------셀 1의 컨텐츠 | 셀 2의 컨텐츠첫 번째 열의 내용 | 두 번째 열의 내용</code></pre><p><em>적용 예</em></p><hr><table><thead><tr><th>첫번째 헤더</th><th>두번째 헤더</th></tr></thead><tbody><tr><td>셀 1의 컨텐츠</td><td>셀 2의 컨텐츠</td></tr><tr><td>첫 번째 열의 내용</td><td>두 번째 열의 내용</td></tr></tbody></table><hr><h3 id="1-3-4-SHA해시-참조-SHA-references">1.3.4.SHA해시 참조(SHA references)</h3><pre><code>16c999e8c71134401a78d4d46435517b2271d6acmojombo@16c999e8c71134401a78d4d46435517b2271d6acmojombo/github-flavored-markdown@16c999e8c71134401a78d4d46435517b2271d6ac</code></pre><p><em>적용 예</em></p><hr><p>16c999e8c71134401a78d4d46435517b2271d6ac<br>mojombo@16c999e8c71134401a78d4d46435517b2271d6ac<br>mojombo/github-flavored-markdown@16c999e8c71134401a78d4d46435517b2271d6ac</p><hr><h3 id="1-3-5-저장소-내의-이슈-참조-Issue-references-within-a-repository">1.3.5.저장소 내의 이슈 참조(Issue references within a repository)</h3><pre><code>#1mojombo#1mojombo/github-flavored-markdown#1</code></pre><p><em>적용 예</em></p><hr><p>#1<br>mojombo#1<br>mojombo/github-flavored-markdown#1</p><hr><h3 id="1-3-6-유저이름-언급-Username-mentions">1.3.6.유저이름 @언급(Username @mentions)</h3><p><code>@</code>기호를 입력하고 사용자 이름을 입력하면 해당 사람에게 와서 댓글을 보도록 알립니다. 개인을 언급 하고 있기 때문에 이것을“@mention”이라고합니다 . 조직 내 팀을 <code>@</code>기호로 언급 할 수도 있습니다.</p><h3 id="1-3-7-URL-자동링크-Automatic-linking-for-URLs">1.3.7.URL 자동링크(Automatic linking for URLs)</h3><pre><code>자동링크 적용 http://www.github.com/</code></pre><p>URL <code>http://www.github.com/</code>은 클릭 가능한 링크로 자동 변환됩니다.</p><p><em>적용 예</em></p><hr><p>자동링크 적용 <a href="http://www.github.com/" target="_blank" rel="noopener">http://www.github.com/</a></p><hr><h3 id="1-3-8-취소선-Strikethrough">1.3.8.취소선(Strikethrough)</h3><pre><code>~~두개의 물결표에 싸인 단어는 취소선이 표시됩니다~~</code></pre><p>#<em>적용 예</em></p><hr><p><s>두개의 물결표에 싸인 단어는 취소선이 표시됩니다</s></p><hr>]]></content>
      
      
      <categories>
          
          <category> Foundation </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>접근제어(Access Control)</title>
      <link href="/2020/04/21/swift/swift-AccessControl/"/>
      <url>/2020/04/21/swift/swift-AccessControl/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">AccessControl</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.접근제어(Acess Control)</h1><p>접근제어는 개체지향 프로그래밍 패러다임에서 은닉화를 구현하기위한 핵심 기능으로 다른 모듈의 코드 또는 다른 소스 파일 등으로부터 접근 제한 및 세부 구현 내용을 숨기고 접근할 수 있는 인터페이스 지정이 가능하다.</p><h2 id="1-1-모듈과-소스파일">1.1.모듈과 소스파일</h2><p>스위프트의 접근제어는 모듈과 소스파일을 기반으로 설계됨.</p><h3 id="1-1-1-모듈-Module">1.1.1.모듈(Module)</h3><p><img src="https://user-images.githubusercontent.com/45344633/79858895-1597d480-840b-11ea-9085-bb00d5a17510.png" alt="image"></p><ul><li>import 를 통해 다른 모듈로부터 불러들일 수 있는 하나의 코드 배포 단위</li><li>Library / Framework / Application 등</li></ul><h3 id="1-1-2-소스파일-Source-File">1.1.2.소스파일(Source File)</h3><p><img src="https://user-images.githubusercontent.com/45344633/79859153-88a14b00-840b-11ea-8e8d-36d292720289.png" alt="image"></p><ul><li>모듈 내에 포함된 각각의 Swift 소스 코드 파일</li></ul><h2 id="1-2-접근-수준-Access-Level">1.2.접근 수준(Access Level)</h2><p>접근수준 키워드를 통해 접근제어를 할 수 있는데 접근수준을 명시할 수 있는 키워드는 <code>open, public, internal, fileperivate, private</code>다섯가지다.</p><p><img src="https://user-images.githubusercontent.com/45344633/79860016-e71af900-840c-11ea-9b52-1a35a02db30c.png" alt="image"></p><table><thead><tr><th>접근수준</th><th>키워드</th><th>범위</th></tr></thead><tbody><tr><td>개방 접근수준</td><td>open</td><td>모듈 외부까지</td></tr><tr><td>공개 접근수준</td><td>public</td><td>모듈 외부까지</td></tr><tr><td>내부 접근수준</td><td>internal</td><td>모듈 내부</td></tr><tr><td>파일외부비공개 접근수준</td><td>fileprivate</td><td>파일 내부</td></tr><tr><td>비공개 접근수준</td><td>private</td><td>기능 정의 내부</td></tr></tbody></table><h3 id="1-2-1-공개-접근수준-Public">1.2.1.공개 접근수준(Public)</h3><p>public키워드 접근수준이 지정이된 요소는 어디든 쓰일 수 있고 주로 프레임워크에서 외부와 연결될 인터페이스를 구현하는데 많이 쓰인다.</p><p><em>스위프트의 기본요소는 모두 공개접근수준으로 구현되있다고 생각하면 된다</em></p><h3 id="1-2-2-개방-접근수준-Open">1.2.2.개방 접근수준(Open)</h3><p>open키워드로 지정할 수 있는 개방 접근수준은 공개접근수준 이상으로 높은 접근수준이고 <code>클래스와 클래스의 멤버에만 사용할 수 있다</code>.</p><p><em>공개 접근수준과 차이점</em></p><ul><li>open을 제외한 다른 접근수준의 클래스는 그 클래스가 정의된 모듈 안에서 상속할 수 있다.</li><li>open을 제외한 다른 모든 접근수준의 클래스 멤버는 해당 멤버가 정의된 모듈 안에서 재정의할 수 있다.</li><li>open의 클래스는 그 클래스가 정의된 모듈 밖의 다른 모듈에서도 상속할 수 있다.</li><li>open의 클래스 멤버는 해당 멤버가 정의도니 모듈 밖의 다른 모듈에서 재정의할 수 있다.</li></ul><h3 id="1-2-3-내부-접근수준-internal">1.2.3.내부 접근수준(internal)</h3><p>internal은 모든 요소에 암묵적으로 지정하는 기본 접근수준이다. 우리가 접근제어를 따로 지정해주지 않으면 우리가 사용하는 클래스 앞에 붙어있다고 생각하면 된다.</p><h3 id="1-2-4-파일외부비공개-접근수준-fileprivate">1.2.4.파일외부비공개 접근수준(fileprivate)</h3><p>fileprivate 접근수준으로 지정된 요소는 <code>소스파일 내부에서만 사용할 수 있다</code>.</p><h3 id="1-2-5-비공개-접근수준-Private">1.2.5.비공개 접근수준(Private)</h3><p>private 접근수준은 가장 한정적인 범위로 지정된 요소는 그 기능을 <code>구현된 범위 안에서만 사용할 수 있다</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>클로저(Closure)</title>
      <link href="/2020/04/20/swift/swift-Closure/"/>
      <url>/2020/04/20/swift/swift-Closure/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">Closure</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.클로저(Closure)</h1><p>스위프트에서 함수형 프로그램 패러다임을 접할 때 처음으로 꼭 알아야 할 것이 클로저(Closuer)이다</p><p><em>Closure의 세가지 형태</em></p><ul><li>이름이 있으면서 어떤 값도 획득하지 않는 전역함수 형태</li><li>이름이 있으면서 다른 함수 내부의 값을 획득할 수 있는 중첩된 함수의 형태</li><li>이름이 없고 주변 문맥에 따라 값을 획득할 수 있는 축약 문법으로 작성한 형태</li></ul><p><em>Closure의 표현</em></p><ul><li>클로저는 매개변수와 반환 값의 타입을 문맥을 통해 유추할 수 있기 때문에 매개변수와 반환 값의 타입을 생략 할 수 있다.</li><li>클로저에 단 한 줄의 표현만 들어있다면 암시적으로 반한값으로 취급한다.</li><li>축약된 전달인자 이름을 사용할 수 있다.</li><li>후행 클로저 문법을 사용할 수 있다.</li></ul><h2 id="1-1-클로저-기본-Closure-Basic">1.1.클로저 기본(Closure Basic)</h2><p><em>CloSure 표현</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;(매개변수들) -&gt; 반환타입 <span class="keyword">in</span></span><br><span class="line">    실행코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클로저도 함수와 마찬가지로 입력과 출력 매개변수를 사용할 수 있다 매개변수 이름을 지정한다면 가변 매개변수 또한 사용 가능하다.</p><h2 id="1-2-후행-클로저-Trailing-Closure">1.2.후행 클로저(Trailing Closure)</h2><p>함수나 메서드의 마지막 전달인자로 위치하는 클로저는 함수나 메서드의 소괄호를 닫은 후 작성해도 된다. 클로저가 길어지거나 가독성이 떨어진다 싶으면 사용하는것이 후행 클로저이다.</p><p><em>Trailing Closure</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reversed: [<span class="type">String</span>] = names.sorted() &#123; (first: <span class="type">String</span>, second: <span class="type">STring</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> first &gt; second</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sorted()</code>메서드처럼 단 하나의 클로저만 전달인자로 전달하는 경우에는 소괄호를 생략해줄 수 도 있다.</p><p><em>Xcode에서도 자동완성으로 후행 클로저를 사용하도록 유도한다.</em></p><h2 id="1-3-클로저-표현의-간소화">1.3.클로저 표현의 간소화</h2><p>클로저의 표현을 간소화시키는 방법에 대하여 알아보자</p><h3 id="1-3-1-문맥을-이용한-타입-추론">1.3.1.문맥을 이용한 타입 추론</h3><p>메서드의 전달인자로 전달하는 클로저는 메서드에서 요구하는 형태로 전달해야한다는 특성 때문에 전달인자로 전달할 클로저는 이미 적합한 타입을 준수하고 있다고 유추할 수 있다. 그래서 전달인자로 전달하는 클로저를 구현할 때는 매개변수의 타입이나 반환 값의 타입을 굳이 표현해주지않고 생략하더라도 문제가 없다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reversed: [<span class="type">String</span>] = names.sorted &#123; (first, second) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> first &gt; second</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-단축-인자-이름">1.3.2.단축 인자 이름</h3><p>위의 클로저에서 sorted(by:)메서드로 전달하는 클로저에서 의미가 없어보이는 매개변수 first, second를 스위프트가 제공해주는 단축인자로 간결하게 표현하자.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reversed: [<span class="type">String</span>] = names.sorted &#123;</span><br><span class="line">    <span class="keyword">return</span> $<span class="number">0</span> &gt; $<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코드에서 알 수 있듯이 단축 인자 이름은 첫 번째 전달인자부터 $0, $1, $2…순서로 $와 숫자의 조합으로 표현한다.<br>매개변수 및 반환 타입과 실행 코드를 구분하기위해 사용했던 in을 사용할 필요도 없어진다.</p><h3 id="1-3-3-암시적-반환-표현">1.3.3.암시적 반환 표현</h3><p>위의 클로저에서 더이상 줄일것이 없어보이지만 클로저에서는 return키워드마저 생략이 가능하다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reversed: [<span class="type">String</span>] = names.sorted &#123; $<span class="number">9</span> &gt; $<span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><p>위의 코드처럼 클로저가 반환값을 갖는 클로저이고 클로저 내부의 실행문이 단 한 줄이라면, 암시적으로 그 실행문은 반환 값으로 사용할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>구구단</title>
      <link href="/2020/04/17/Algorithm/Algorithm-Q2739/"/>
      <url>/2020/04/17/Algorithm/Algorithm-Q2739/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">2739번</span><h1>1.문제 2739번</h1><h2 id="1-1-구구단">1.1.구구단</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">128 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>N을 입력받은 뒤, 구구단 N단을 출력하는 프로그램을 작성하시오. 출력 형식에 맞춰서 출력하면 된다.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 9보다 작거나 같다.</p><h3 id="1-4-출력">1.4.출력</h3><p>출력형식과 같게 N<em>1부터 N</em>9까지 출력한다.</p><h3 id="1-5-제한"><s>1.5.제한</s></h3><h3 id="1-6-예제입력">1.6.예제입력</h3><p><em>입력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="1-7-예제출력">1.7.예제출력</h3><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> * <span class="number">1</span> = <span class="number">2</span></span><br><span class="line"><span class="number">2</span> * <span class="number">2</span> = <span class="number">4</span></span><br><span class="line"><span class="number">2</span> * <span class="number">3</span> = <span class="number">6</span></span><br><span class="line"><span class="number">2</span> * <span class="number">4</span> = <span class="number">8</span></span><br><span class="line"><span class="number">2</span> * <span class="number">5</span> = <span class="number">10</span></span><br><span class="line"><span class="number">2</span> * <span class="number">6</span> = <span class="number">12</span></span><br><span class="line"><span class="number">2</span> * <span class="number">7</span> = <span class="number">14</span></span><br><span class="line"><span class="number">2</span> * <span class="number">8</span> = <span class="number">16</span></span><br><span class="line"><span class="number">2</span> * <span class="number">9</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure><h3 id="1-8-풀이">1.8.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)!</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">9</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(num) * \(i) = \(num*i)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>함수(Function)</title>
      <link href="/2020/04/17/swift/swift-Function/"/>
      <url>/2020/04/17/swift/swift-Function/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">Function</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 스위프트프로그래밍 3판 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다.</p></blockquote><h1>1.함수(Function)</h1><p>함수는 프로그램을 이루는 주된 요소중 하나이다. 작업의 가장 작은 단위이자 작은 프로그램이며 <code>하나의 프로그램은 하나의 큰 함수다</code>.</p><h2 id="1-1-함수와-메서드">1.1.함수와 메서드</h2><p>함수와 메서드(method)는 기본적으로 같다. <code>상황이나 위치에 따라서 다른 용어</code>로 부르는 것 뿐이다.</p><ul><li><strong>메서드로 불리는 상황</strong><ul><li>구조체, 클래스, 열거형 등 특정 타입에 연관되어 사용하는 함수</li></ul></li><li><strong>함수로 불리는 상황</strong><ul><li>모듈 전체에서 전역적으로 사용할 수 있는 함수</li></ul></li></ul><h2 id="1-2-함수의-정의와-호출">1.2.함수의 정의와 호출</h2><p>함수는 자유도가 높은 문법중 하나로 <code>함수의이름</code>, <code>매개변수(파라미터, Parameter)</code>, <code>반환타입</code>등을 사용하여 함수를 정의한다.</p><p><em>함수 기본형태</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 함수 이름<span class="params">(매개변수 ...)</span></span> -&gt; 반환 타입 &#123;</span><br><span class="line">  실행 구문</span><br><span class="line">  <span class="keyword">return</span> 반환 값</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>return키워드를 생략한 매개변수가 여러개인 함수</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNum</span><span class="params">(firstNum: Int, secondNum: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  firstNum + secondNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addTwoNum(firstNum: <span class="number">5</span>, secondNum: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>함수의 내부 코드가 한줄이면 return키워드를 생략할 수 있다. 이 코드에서의 매개변수는 firstNum, secondNum이고 전달인자(Argument)는 실제 전달되는 값인 5와 2이다.</p><p><em>전달인자 레이블을 사용한 함수, 생략한 함수</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(to name: Stirng, <span class="number">_</span> tiem: Int )</span></span></span><br></pre></td></tr></table></figure><p>함수 외부에서 사용할 때에는 Argument Label을 사용하고 함수 내부에서는 파라미터(num)을 사용한다.</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>두 수 비교하기</title>
      <link href="/2020/04/15/Algorithm/Algorithm-Q1330/"/>
      <url>/2020/04/15/Algorithm/Algorithm-Q1330/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">1330번</span><h1>1.문제 1330번</h1><h2 id="1-1-두-수-비교하기">1.1.두 수 비교하기</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">512 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>두 정수 A와 B가 주어졌을 때, A와 B를 비교하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 A와 B가 주어진다. A와 B는 공백 한 칸으로 구분되어져 있다.</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 다음 세 가지 중 하나를 출력한다.</p><ul><li>A가 B보다 큰 경우에는 '&gt;'를 출력한다.</li><li>A가 B보다 작은 경우에는 '&lt;'를 출력한다.</li><li>A와 B가 같은 경우에는 '=='를 출력한다.</li></ul><h3 id="1-5-제한">1.5.제한</h3><p>-10,000 ≤ A, B ≤ 10,000</p><h3 id="1-6-예제입력">1.6.예제입력</h3><p><em>입력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><em>입력 2번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><em>입력 3번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="1-7-예제출력">1.7.예제출력</h3><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;</span><br></pre></td></tr></table></figure><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==</span><br></pre></td></tr></table></figure><h3 id="1-8-풀이">1.8.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">readLine</span>() <span class="comment">// "1 2"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> number = num &#123;</span><br><span class="line">    <span class="keyword">let</span> array = number.components(separatedBy: <span class="string">" "</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> <span class="type">A</span> = <span class="type">Int</span>(array[<span class="number">0</span>])!</span><br><span class="line">    <span class="keyword">let</span> <span class="type">B</span> = <span class="type">Int</span>(array[<span class="number">1</span>])!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="type">A</span>&gt;<span class="type">B</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt;"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="type">A</span>&lt;<span class="type">B</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&lt;"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"=="</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>알람 시계</title>
      <link href="/2020/04/15/Algorithm/Algorithm-Q2884/"/>
      <url>/2020/04/15/Algorithm/Algorithm-Q2884/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">2884번</span><h1>1.문제 2884번</h1><h2 id="1-1-알람-시계">1.1.알람 시계</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">128 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>상근이는 매일 아침 알람을 듣고 일어난다. 알람을 듣고 바로 일어나면 다행이겠지만, 항상 조금만 더 자려는 마음 때문에 매일 학교를 지각하고 있다.</p><p>상근이는 모든 방법을 동원해보았지만, 조금만 더 자려는 마음은 그 어떤 것도 없앨 수가 없었다.</p><p>이런 상근이를 불쌍하게 보던, 창영이는 자신이 사용하는 방법을 추천해 주었다.</p><p>바로 &quot;45분 일찍 알람 설정하기&quot;이다.</p><p>이 방법은 단순하다. 원래 설정되어 있는 알람을 45분 앞서는 시간으로 바꾸는 것이다. 어차피 알람 소리를 들으면, 알람을 끄고 조금 더 잘 것이기 때문이다. 이 방법을 사용하면, 매일 아침 더 잤다는 기분을 느낄 수 있고, 학교도 지각하지 않게 된다.</p><p>현재 상근이가 설정한 알람 시각이 주어졌을 때, 창영이의 방법을 사용한다면, 이를 언제로 고쳐야 하는지 구하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 두 정수 H와 M이 주어진다. (0 ≤ H ≤ 23, 0 ≤ M ≤ 59) 그리고 이것은 현재 상근이가 설정한 놓은 알람 시간 H시 M분을 의미한다.</p><p>입력 시간은 24시간 표현을 사용한다. 24시간 표현에서 하루의 시작은 0:0(자정)이고, 끝은 23:59(다음날 자정 1분 전)이다. 시간을 나타낼 때, 불필요한 0은 사용하지 않는다.</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 상근이가 창영이의 방법을 사용할 때, 설정해야 하는 알람 시간을 출력한다. (입력과 같은 형태로 출력하면 된다.)</p><h3 id="1-5-제한"><s>1.5.제한</s></h3><h3 id="1-6-예제입력">1.6.예제입력</h3><p><em>입력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p><em>입력 2번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><p><em>입력 3번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span> <span class="number">40</span></span><br></pre></td></tr></table></figure><h3 id="1-7-예제출력">1.7.예제출력</h3><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> <span class="number">25</span></span><br></pre></td></tr></table></figure><p><em>출력 2번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span> <span class="number">45</span></span><br></pre></td></tr></table></figure><p><em>출력 3번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span> <span class="number">55</span></span><br></pre></td></tr></table></figure><h3 id="1-8-풀이">1.8.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstNum = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)!</span><br><span class="line"><span class="keyword">var</span> secondNum = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)!</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(firstNum &gt; <span class="number">0</span> &amp;&amp; secondNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(firstNum &lt; <span class="number">0</span> &amp;&amp; secondNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(firstNum &lt; <span class="number">0</span> &amp;&amp; secondNum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(firstNum &gt; <span class="number">0</span> &amp;&amp; secondNum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"값에 0이 올 수 없습니다."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>시험 성적</title>
      <link href="/2020/04/15/Algorithm/Algorithm-Q9498/"/>
      <url>/2020/04/15/Algorithm/Algorithm-Q9498/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">9498번</span><h1>1.문제 9498번</h1><h2 id="1-1-시험-성적">1.1.시험 성적</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">128 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>시험 점수를 입력받아 90 ~ 100점은 A, 80 ~ 89점은 B, 70 ~ 79점은 C, 60 ~ 69점은 D, 나머지 점수는 F를 출력하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 시험 점수가 주어진다. 시험 점수는 0보다 크거나 같고, 100보다 작거나 같은 정수이다.</p><h3 id="1-4-출력">1.4.출력</h3><p>시험 성적을 출력한다.</p><h3 id="1-5-제한"><s>1.5.제한</s></h3><h3 id="1-6-예제입력">1.6.예제입력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="1-7-예제출력">1.7.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">A</span></span><br></pre></td></tr></table></figure><h3 id="1-8-풀이">1.8.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)!<span class="comment">// "100"</span></span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"점수가 100점 이상입니다 점수를 다시 확인해 주세요."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"A"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">80</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"B"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">70</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"C"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">60</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"D"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"F"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>사분면 고르기</title>
      <link href="/2020/04/15/Algorithm/Algorithm-Q14681/"/>
      <url>/2020/04/15/Algorithm/Algorithm-Q14681/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">14681번</span><h1>1.문제 14681번</h1><h2 id="1-1-사분면-고르기">1.1.사분면 고르기</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">512 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>흔한 수학 문제 중 하나는 주어진 점이 어느 사분면에 속하는지 알아내는 것이다. 사분면은 아래 그림처럼 1부터 4까지 번호를 갖는다. <code>Quadrant n</code>은 <code>제n사분면</code>이라는 뜻이다.</p><img width="276" alt="1" src="https://user-images.githubusercontent.com/45344633/77875511-3e550000-728b-11ea-958f-60c60ee91403.png"><p>예를 들어, 좌표가 (12, 5)인 점 A는 x좌표와 y좌표가 모두 양수이므로 제1사분면에 속한다. 점 B는 x좌표가 음수이고 y좌표가 양수이므로 제2사분면에 속한다.</p><p>점의 좌표를 입력받아 그 점이 어느 사분면에 속하는지 알아내는 프로그램을 작성하시오. 단, x좌표와 y좌표는 모두 양수나 음수라고 가정한다.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫 줄에는 정수 x가 주어진다. (−1000 ≤ x ≤ 1000; x ≠ 0) 다음 줄에는 정수 y가 주어진다. (−1000 ≤ y ≤ 1000; y ≠ 0)</p><h3 id="1-4-출력">1.4.출력</h3><p>점 (x, y)의 사분면 번호(1, 2, 3, 4 중 하나)를 출력한다.</p><h3 id="1-5-제한"><s>1.5.제한</s></h3><h3 id="1-6-예제입력">1.6.예제입력</h3><p><em>입력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><em>입력 2번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line">-<span class="number">13</span></span><br></pre></td></tr></table></figure><h3 id="1-7-예제출력">1.7.예제출력</h3><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="1-8-풀이">1.8.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstNum = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)!</span><br><span class="line"><span class="keyword">var</span> secondNum = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)!</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(firstNum &gt; <span class="number">0</span> &amp;&amp; secondNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(firstNum &lt; <span class="number">0</span> &amp;&amp; secondNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(firstNum &lt; <span class="number">0</span> &amp;&amp; secondNum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(firstNum &gt; <span class="number">0</span> &amp;&amp; secondNum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"값에 0이 올 수 없습니다."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>윤년</title>
      <link href="/2020/04/15/Algorithm/Algorithm-Q2753/"/>
      <url>/2020/04/15/Algorithm/Algorithm-Q2753/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">2753번</span><h1>1.문제 2753번</h1><h2 id="1-1-윤년">1.1.윤년</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">128 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>연도가 주어졌을 때, 윤년이면 1, 아니면 0을 출력하는 프로그램을 작성하시오.</p><p>윤년은 연도가 4의 배수이면서, 100의 배수가 아닐 때 또는 400의 배수일 때이다.</p><p>예를 들어, 2012년은 4의 배수이면서 100의 배수가 아니라서 윤년이다. 1900년은 100의 배수이고 400의 배수는 아니기 때문에 윤년이 아니다. 하지만, 2000년은 400의 배수이기 때문에 윤년이다.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 연도가 주어진다. 연도는 1보다 크거나 같고, 4000보다 작거나 같은 자연수이다.</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 윤년이면 1, 아니면 0을 출력한다.</p><h3 id="1-5-제한"><s>1.5.제한</s></h3><h3 id="1-6-예제입력">1.6.예제입력</h3><p><em>입력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2000</span></span><br></pre></td></tr></table></figure><p><em>입력 2번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1999</span></span><br></pre></td></tr></table></figure><h3 id="1-7-예제출력">1.7.예제출력</h3><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><em>출력 1번</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="1-8-풀이">1.8.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)! <span class="comment">// "2000"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(num % <span class="number">100</span> != <span class="number">0</span> || num % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>옵셔널(Optional)</title>
      <link href="/2020/04/15/swift/swift-Optaional/"/>
      <url>/2020/04/15/swift/swift-Optaional/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">Optionals</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.옵셔널(Optional)</h1><p>옵셔널은 <code>값이 있을수도있고 없을수도 있는</code> 표현이다. 이를 다르게 표현하자면 <code>변수나 상수에 꼭 값이 있다는 것을 보장할 수 없다</code>라고 표현할 수 있다.</p><h2 id="1-1-nil-과-0의-차이">1.1.nil 과 0의 차이</h2><p>변수에 0을 할당했을때를 생각해본다면, 정수형 변수에 0이라는 값을 넣은 것과 같으며 0은 값이 없는것이 아니다. 문자열 &quot;&quot;을 문자열 변수에 할당했을때에도 &quot;빈 문자열&quot;이라는 값이며 값이 없는것이 아니다.</p><p><img src="https://user-images.githubusercontent.com/45344633/79943733-aa9adc00-84a4-11ea-819b-4eef3ee3696c.png" alt="image"></p><p>위의 왼쪽의 휴지도 휴지가 다 떨어진 것이지 없는것이 아니라고 볼 수 있다.</p><h2 id="1-2-옵셔널-타입-선언-Optional-Type-Declaration">1.2.옵셔널 타입 선언(Optional Type Declaration)</h2><p>옵셔널 타입을 선언하는 방법은 두가지의 방법이 있는데 데이터타입 뒤에 물음표(?) 를 붙이는 방법과 데이터타입의 앞에 <code>Optional</code>을 명시해주는것이 있다.<br><em>옵셔널 선언</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 변수명: 데이터타입?</span><br><span class="line"><span class="keyword">var</span> 변수명: <span class="type">Optional</span>&lt;데이터타입&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someOptional: <span class="type">String?</span>        </span><br><span class="line"><span class="keyword">var</span> someOptional: <span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>하지만 두가지의 선언 방법의 차이는 데이터 타입 위에 물음표(?)를 붙인 선언방법에서는 자동으로 nil값을 할당해 초기화해 주지만 <code>Optional&lt;Type&gt;</code>을 통해 선언한 방법은 수동으로 nil값을 넣어 초기화 해야 한다.</p><p>두번째 방법을 이용하여 옵셔널을 선언하고 값을 초기화 하지 않았을 경우 다음과 같은 오류를 확인할 수 있다.</p><div class="alert alert-danger"><i class="fa fa-bug"></i>  error: Optional.xcplaygroundpage:9:1: error: variable 'someOptional' used before being initialized</div><p>옵셔널이 아닌 타입의 경우 옵셔널 타입에 할당할 수 있지만, 옵셔널 타입의 경우 옵셔널이 아닌 타입에 할당하려하면 에러가 발생한다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someOptional: <span class="type">String?</span></span><br><span class="line"><span class="keyword">var</span> noneOptional: <span class="type">String</span> = <span class="string">"none optional"</span></span><br><span class="line"></span><br><span class="line">someOptional = noneOptional     <span class="comment">// "none optional"</span></span><br><span class="line"><span class="comment">// noneOptional = someOptional  // error</span></span><br></pre></td></tr></table></figure><p>이와같은 결과가 발생하는 이유는 옵셔널의 경우 print나 dump를 이용하여 값을 확인해보면</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someOptional: <span class="type">String?</span> <span class="comment">// nil</span></span><br><span class="line"><span class="keyword">var</span> noneOptional: <span class="type">String</span> = <span class="string">"None optional"</span></span><br><span class="line"></span><br><span class="line">someOptional = noneOptional</span><br><span class="line"><span class="comment">// noneOptional = someOptional</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(noneOptional) <span class="comment">// None optional</span></span><br><span class="line"><span class="built_in">print</span>(someOptional) <span class="comment">// Optional("None optional")</span></span><br><span class="line"><span class="built_in">dump</span>(someOptional)  <span class="comment">//▿ Optional("None optional")</span></span><br><span class="line">                    <span class="comment">//   - some: "None optional"</span></span><br></pre></td></tr></table></figure><p>이처럼 옵셔널스트링 타입으로 선언한 타입에는 결과값 앞에 <code>Optional</code>이 붙어있는것을 확인할 수 있는데 일반 문자열 타입으로 선언한 <code>noneOptional</code>의 경우에는 그렇지 않은것을 확인할 수 있다. 말 그대로인 <code>옵셔널 스트링 타입</code>에서 알 수 있듯이 서로 다른 타입이며 <code>옵셔널 타입은 일반 타입(다른 옵셔널 타입에 다른 타입도 가능하다)을 포함</code>하고 있다는것을 알 수 있다.</p><ul><li>someOptional는 noneOptional에 할당할 수 없다.</li><li>noneOptional는 someOptional에 할당할 수 있다.</li></ul><center><h4>unOptional ⊂ Optional?</h4></center><center><img width="315" alt="Pasted Graphic 01" src="https://user-images.githubusercontent.com/45344633/79947008-13d21d80-84ac-11ea-820c-8a17ff8c2fd0.png"></center><h2 id="1-3-옵셔널-추출-Optional-Unwrapping">1.3.옵셔널 추출(Optional Unwrapping)</h2><p>옵셔널 추출은 옵셔널 타입으로 지정한 옵셔널 값을 옵셔널이 아닌 값으로 추출하는것을 말한다.</p><h3 id="1-3-1-옵셔널-바인딩-Optional-Binding">1.3.1.옵셔널 바인딩(Optional Binding)</h3><p>옵셔널 바인딩은 옵셔널에 값이 있는지 확인할때 사용한다. <code>if, while, guard</code>구문 등과 결합하여 사용할 수 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalString: <span class="type">String?</span> = <span class="string">"Optional String"</span></span><br><span class="line"><span class="built_in">print</span>(optionalString)   <span class="comment">// Optional("Optional String")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> noneOptionalStr = optionalString &#123;</span><br><span class="line">    <span class="built_in">print</span>(noneOptionalStr)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">var</span> noneOptionalStr = optionalString &#123;</span><br><span class="line">    noneOptionalStr = <span class="string">"Variable Optional String"</span></span><br><span class="line">    <span class="built_in">print</span>(noneOptionalStr)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if let</code> 구문을 활용한 바인딩은 if 구문의 스코프 안에서만 임시상수를 사용할 수 있다.(if 밖에서 사용할수 없고 else에서도 사용할 수 없다.) <code>if var</code>로 변수로 사용할 수도 있는데, if 구문의 스코프 안에서만 사용하는 임사 변수라 let과 var모두 <code>noneOptionalStr</code>를 사용했지만 충돌이 없는것을 확인할 수 있다.</p><h3 id="1-3-2-강제-추출-Forced-Unwrapping">1.3.2.강제 추출(Forced Unwrapping)</h3><p>옵셔널 강제추출은 옵셔널 값 뒤에 느낌표(!)를 붙여주면 강제로 옵셔널타입이 벗겨지는데 옵셔널 값을 추출하는데 가장 간편한 방법이지만 <code>가장 위험한 방법</code>이다. 런타임 오류가 일어날 가능성이 높다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalString: <span class="type">String?</span> = <span class="string">"Optional String"</span></span><br><span class="line"><span class="built_in">print</span>(optionalString!)  <span class="comment">// "Optional String"</span></span><br></pre></td></tr></table></figure><h3 id="1-4-옵셔널-체이닝-Optional-Chaning">1.4.옵셔널 체이닝(Optional Chaning)</h3><p>옵셔널 체이닝은 여러 값이 중첩된 프로퍼티, 메서드 서브스크립션 등을 가져오거나 호출할 때 사용할 수 있는 일련의 과정이다. 만약 옵셔널에 값이 있다면 프로퍼티, 메서드, 서브스크립트 등을 호출할 수있고, 옵셔널의 체인이 중간에 하나라도 nil이라면 nil을 반환한다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting: [<span class="type">String</span>: <span class="type">String</span>] = [</span><br><span class="line">  <span class="string">"John"</span>: <span class="string">"Wassup"</span>,</span><br><span class="line">  <span class="string">"Jane"</span>: <span class="string">"Morning"</span>,</span><br><span class="line">  <span class="string">"Edward"</span>: <span class="string">"Yo"</span>,</span><br><span class="line">  <span class="string">"Tom"</span>: <span class="string">"Howdy"</span>,</span><br><span class="line">  <span class="string">"James"</span>: <span class="string">"Sup"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greeting[<span class="string">"John"</span>])</span><br><span class="line"><span class="built_in">print</span>(greeting[<span class="string">"John"</span>]?.<span class="built_in">count</span>)</span><br><span class="line"><span class="built_in">print</span>(greeting[<span class="string">"NoName"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional Chaining</span></span><br><span class="line"><span class="built_in">print</span>(greeting[<span class="string">"John"</span>]?.lowercased().uppercased())</span><br><span class="line"><span class="built_in">print</span>(greeting[<span class="string">"Alice"</span>]?.lowercased().uppercased())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional Binding</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> greetingValue = greeting[<span class="string">"John"</span>] &#123;</span><br><span class="line">  <span class="built_in">print</span>(greetingValue.lowercased().uppercased())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>나머지</title>
      <link href="/2020/04/14/Algorithm/Algorithm-Q1430/"/>
      <url>/2020/04/14/Algorithm/Algorithm-Q1430/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">Swift</span><span class="label label-primary">백준온라인저지</span><span class="label label-info">10430번</span><h1>1.문제 10430번</h1><h2 id="1-1-나머지">1.1.나머지</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">256 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>(A+B)%C는 ((A%C) + (B%C))%C 와 같을까?</p><p>(A×B)%C는 ((A%C) × (B%C))%C 와 같을까?</p><p>세 수 A, B, C가 주어졌을 때, 위의 네 가지 값을 구하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 A, B, C가 순서대로 주어진다. (2 ≤ A, B, C ≤ 10000)</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 (A+B)%C, 둘째 줄에 ((A%C) + (B%C))%C, 셋째 줄에 (A×B)%C, 넷째 줄에 ((A%C) × (B%C))%C를 출력한다.</p><h3 id="1-5-예제입력">1.5.예제입력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">8</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">let</span> line = <span class="built_in">readLine</span>()!</span><br><span class="line"><span class="keyword">let</span> lineArr = line.components(separatedBy: <span class="string">" "</span>)</span><br><span class="line"><span class="keyword">let</span> a = <span class="type">Int</span>(lineArr[<span class="number">0</span>])!</span><br><span class="line"><span class="keyword">let</span> b = <span class="type">Int</span>(lineArr[<span class="number">1</span>])!</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">Int</span>(lineArr[<span class="number">2</span>])!</span><br><span class="line"><span class="keyword">var</span> <span class="type">A</span>:<span class="type">Int</span> = (a+b)%<span class="built_in">c</span></span><br><span class="line"><span class="keyword">var</span> <span class="type">B</span>:<span class="type">Int</span> = (a%<span class="built_in">c</span>+b%<span class="built_in">c</span>)%<span class="built_in">c</span></span><br><span class="line"><span class="keyword">var</span> <span class="type">C</span>:<span class="type">Int</span> = (a*b)%<span class="built_in">c</span></span><br><span class="line"><span class="keyword">var</span> <span class="type">D</span>:<span class="type">Int</span> = (a%<span class="built_in">c</span>*b%<span class="built_in">c</span>)%<span class="built_in">c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">A</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">B</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">C</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">D</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>사칙연산</title>
      <link href="/2020/04/14/Algorithm/Algorithm-Q10869/"/>
      <url>/2020/04/14/Algorithm/Algorithm-Q10869/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">10869번</span><h1>1.문제 10869번</h1><h2 id="1-1-사칙연산">1.1.사칙연산</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">256 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>두 자연수 A와 B가 주어진다. 이때, A+B, A-B, A*B, A/B(몫), A%B(나머지)를 출력하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>두 자연수 A와 B가 주어진다. (1 ≤ A, B ≤ 10,000)</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 A+B, 둘째 줄에 A-B, 셋째 줄에 A*B, 넷째 줄에 A/B, 다섯째 줄에 A%B를 출력한다.</p><h3 id="1-5-예제입력">1.5.예제입력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">let</span> line = <span class="built_in">readLine</span>()!</span><br><span class="line"><span class="keyword">let</span> lineArr = line.components(separatedBy: <span class="string">" "</span>)</span><br><span class="line"><span class="keyword">let</span> a = <span class="type">Int</span>(lineArr[<span class="number">0</span>])!</span><br><span class="line"><span class="keyword">let</span> b = <span class="type">Int</span>(lineArr[<span class="number">1</span>])!</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="built_in">print</span>(a-b)</span><br><span class="line"><span class="built_in">print</span>(a*b)</span><br><span class="line"><span class="built_in">print</span>(a/b)</span><br><span class="line"><span class="built_in">print</span>(a%b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>곱셈</title>
      <link href="/2020/04/14/Algorithm/Algorithm-Q2588/"/>
      <url>/2020/04/14/Algorithm/Algorithm-Q2588/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">Swift</span><span class="label label-primary">백준온라인저지</span><span class="label label-info">2588번</span><h1>1.문제 2588번</h1><h2 id="1-1-곱셈">1.1.곱셈</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">128 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>(세 자리 수) × (세 자리 수)는 다음과 같은 과정을 통하여 이루어진다.</p><p><img src="https://user-images.githubusercontent.com/45344633/77818833-2fe6d700-7119-11ea-8396-906f5c848aba.png" alt="f5NhGHVLM4Ix74DtJrwfC97KepPl27s (1)"></p><p>(1)과 (2)위치에 들어갈 세 자리 자연수가 주어질 때 (3), (4), (5), (6)위치에 들어갈 값을 구하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 (1)의 위치에 들어갈 세 자리 자연수가, 둘째 줄에 (2)의 위치에 들어갈 세자리 자연수가 주어진다.</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄부터 넷째 줄까지 차례대로 (3), (4), (5), (6)에 들어갈 값을 출력한다.</p><h3 id="1-5-예제입력">1.5.예제입력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">472</span></span><br><span class="line"><span class="number">385</span></span><br></pre></td></tr></table></figure><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2360</span></span><br><span class="line"><span class="number">3776</span></span><br><span class="line"><span class="number">1416</span></span><br><span class="line"><span class="number">181720</span></span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">var</span> firstNum = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)!</span><br><span class="line"><span class="keyword">var</span> secondNum = <span class="type">Int</span>(<span class="built_in">readLine</span>()!)!</span><br><span class="line"><span class="keyword">var</span> <span class="type">A</span>:<span class="type">Int</span> = (firstNum*(secondNum%<span class="number">10</span>))</span><br><span class="line"><span class="keyword">var</span> <span class="type">B</span>:<span class="type">Int</span> = (firstNum*((secondNum%<span class="number">100</span>)/<span class="number">10</span>))</span><br><span class="line"><span class="keyword">var</span> <span class="type">C</span>:<span class="type">Int</span> = (firstNum*(secondNum/<span class="number">100</span>))</span><br><span class="line"><span class="keyword">var</span> <span class="type">D</span>:<span class="type">Int</span> = (firstNum*secondNum)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">A</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">B</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">C</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">D</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A+B</title>
      <link href="/2020/04/13/Algorithm/Algorithm-Q1000/"/>
      <url>/2020/04/13/Algorithm/Algorithm-Q1000/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">1000번</span><h1>1.문제 1000번</h1><h2 id="1-1-A-B">1.1.A+B</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">2초</td><td style="text-align:center">128 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>두 정수 A와 B를 입력받은 다음, A+B를 출력하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 A와 B가 주어진다. (0 &lt; A, B &lt; 10)</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 A+B를 출력한다.</p><h3 id="1-5-예제입력">1.5.예제입력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">let</span> line = <span class="built_in">readLine</span>()!</span><br><span class="line"><span class="keyword">let</span> lineArr = line.components(separatedBy: <span class="string">" "</span>)</span><br><span class="line"><span class="keyword">let</span> a = <span class="type">Int</span>(lineArr[<span class="number">0</span>])!</span><br><span class="line"><span class="keyword">let</span> b = <span class="type">Int</span>(lineArr[<span class="number">1</span>])!</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A/B</title>
      <link href="/2020/04/13/Algorithm/Algorithm-Q1008/"/>
      <url>/2020/04/13/Algorithm/Algorithm-Q1008/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">1008번</span><h1>1.문제 1008번</h1><h2 id="1-1-A-B">1.1.A/B</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">2초</td><td style="text-align:center">128 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>두 정수 A와 B를 입력받은 다음, A/B를 출력하는 프로그램을 작성하시오</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 A와 B가 주어진다. (0 &lt; A, B &lt; 10)</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 A/B를 출력한다. 실제 정답과 출력값의 절대오차 또는 상대오차가 10-9 이하이면 정답이다.</p><h3 id="1-5-예제입력">1.5.예제입력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><em>10-9 이하의 오차를 허용한다는 말은 꼭 소수 9번째 자리까지만 출력하라는 뜻이 아니다.</em></p><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.33333333333333333333333333333333</span></span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">let</span> line = <span class="built_in">readLine</span>()!</span><br><span class="line"><span class="keyword">let</span> lineArr = line.components(separatedBy: <span class="string">" "</span>)</span><br><span class="line"><span class="keyword">let</span> a = <span class="type">Double</span>(lineArr[<span class="number">0</span>])!</span><br><span class="line"><span class="keyword">let</span> b = <span class="type">Double</span>(lineArr[<span class="number">1</span>])!</span><br><span class="line"><span class="built_in">print</span>(a/b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A-B</title>
      <link href="/2020/04/13/Algorithm/Algorithm-Q1001/"/>
      <url>/2020/04/13/Algorithm/Algorithm-Q1001/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">1001번</span><h1>1.문제 1001번</h1><h2 id="1-1-A-B">1.1.A-B</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">2초</td><td style="text-align:center">128 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>두 정수 A와 B를 입력받은 다음, A-B를 출력하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 A와 B가 주어진다. (0 &lt; A, B &lt; 10)</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 A-B를 출력한다.</p><h3 id="1-5-예제입력">1.5.예제입력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">let</span> line = <span class="built_in">readLine</span>()!</span><br><span class="line"><span class="keyword">let</span> lineArr = line.components(separatedBy: <span class="string">" "</span>)</span><br><span class="line"><span class="keyword">let</span> a = <span class="type">Int</span>(lineArr[<span class="number">0</span>])!</span><br><span class="line"><span class="keyword">let</span> b = <span class="type">Int</span>(lineArr[<span class="number">1</span>])!</span><br><span class="line"><span class="built_in">print</span>(a-b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A*B</title>
      <link href="/2020/04/13/Algorithm/Algorithm-Q10998/"/>
      <url>/2020/04/13/Algorithm/Algorithm-Q10998/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">10998번</span><h1>1.문제 10998번</h1><h2 id="1-1-A×B">1.1.A×B</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">256 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>두 정수 A와 B를 입력받은 다음, A×B를 출력하는 프로그램을 작성하시오.</p><h3 id="1-3-입력">1.3.입력</h3><p>첫째 줄에 A와 B가 주어진다. (0 &lt; A, B &lt; 10)</p><h3 id="1-4-출력">1.4.출력</h3><p>첫째 줄에 A×B를 출력한다.</p><h3 id="1-5-예제입력">1.5.예제입력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">let</span> line = <span class="built_in">readLine</span>()!</span><br><span class="line"><span class="keyword">let</span> lineArr = line.components(separatedBy: <span class="string">" "</span>)</span><br><span class="line"><span class="keyword">let</span> a = <span class="type">Int</span>(lineArr[<span class="number">0</span>])!</span><br><span class="line"><span class="keyword">let</span> b = <span class="type">Int</span>(lineArr[<span class="number">1</span>])!</span><br><span class="line"><span class="built_in">print</span>(a*b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>흐름 제어(Flow control) 조건문</title>
      <link href="/2020/04/13/swift/swift-FlowControll/"/>
      <url>/2020/04/13/swift/swift-FlowControll/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">FlowControl</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.흐름 제어(Flow control) 조건문</h1><p>프로그램을 작성하다 <code>특정 조건에서 코드를 실행해야 하거나 실행하지 말아야 하는 상황이나, 특정 상확을 반복해야하는 일</code>이 발생하는데 이때에 사용하는것이 조건문과 반복문이다. 스위프트의 흐름제어 구문에서는 소괄호(())를 대부분 생략할 수 있다.</p><h2 id="1-1-조건문">1.1.조건문</h2><p>스위프트의 조건문에는 <code>if 구문</code>과 <code>switch 구문</code> <code>guard 구문</code>이 있다.</p><h3 id="1-1-1-if-구문">1.1.1.if 구문</h3><p>if 구문은 대표적인 조건문으로 if,else등의 키워드를 사용하여 구현할 수 있다. 정수, 실수 등 0이 아닌 모든 값을 참으로 취급하여 조건 값이 될 수 있었던 다른 언어와는 달리 <code>스위프트의 if 구문은 조건의 값이 꼭 Bool타입이어야 한다</code>.</p><p><em>if 구문 구성</em></p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 조건 <span class="number">1</span> &#123;</span><br><span class="line">    실행 코드 <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">if</span> 조건 <span class="number">2</span> &#123;</span><br><span class="line">    실행 코드 <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    실행 코드 <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 구성에서 <code>조건 1</code>이 <code>true</code>일 경우 <code>실행코드 1</code>을 실행하고, <code>false</code>일 경우 <code>조건 2</code>를 실행하며 조건 2가 <code>true</code>일 경우 <code>실행 코드 2</code> 를 실행하고 <code>false</code>일 경우 <code>실행 코드 3</code> 을 실행한다.</p><p>또한 <code>else if</code>는 몇 개가 이어져도 상관없으며 <code>else 블록은 없어도 상관없다</code>. 조건이 true를 만족하여 블록 내부의 명령문이 실행되면 그다음에 이어진 <code>else if</code>의 조건을 충족하더라도 실행되지 않고 조건문을 빠져나오게 된다.</p><h3 id="1-1-2-switch-구문">1.1.2.switch 구문</h3><p>switch 구문 또한 대표적인 조건문으로 C언어에서는 정수 타입만 들어갈 수 있었지만, 스위프트에서는 switch 구문의 조건에 다양한 값이 들어갈 수 있다. <code>switch 문은 가능한 모든 사례를 반드시 다루어야 한다. (Switch must be exhaustive)</code></p><p><em>switch 구문 구성</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> 입력값 &#123;</span><br><span class="line">   <span class="keyword">case</span> 비교 값 <span class="number">1</span>:</span><br><span class="line">       실행 구문 <span class="number">1</span></span><br><span class="line">       <span class="keyword">fallthrough</span></span><br><span class="line">   <span class="keyword">case</span> 비교 값 <span class="number">2</span>, 비교 값 <span class="number">3</span>:</span><br><span class="line">       실행 구문 <span class="number">2</span> 또는 <span class="number">3</span></span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       실행 구문</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4번째 라인에서 사용된 <code>fallthrough</code>키워드를 사용하면 해당 case를 실행하고 종료하지 않고 다음 case로 넘어가게 되고, 7번째 라인에서 사용된 <code>break</code>키워드를 사용하게 되면 해당 case에서 구문을 종료하게 된다.</p><p><em>Tuple type 사용</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">NameAge</span> = (name: <span class="type">String</span>, age: <span class="type">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tupleValue: = <span class="type">NameAge</span> = (<span class="string">"조요한"</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> tupleValue &#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="string">"조요한"</span>, <span class="number">28</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"값이 일치합니다."</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"무엇을 찾으시나요 ?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>case의 값으로 <code>튜플(Tuple)</code>을 사용할 수 있다는것을 보여주는 예제이다.</p><p><em>where clause 사용</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> even = <span class="number">4</span></span><br><span class="line"><span class="keyword">switch</span> even &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x.isMultiple(of: <span class="number">2</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(x)는 짝수"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"홀수"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드는 어떤 숫자가 주어졌을 때 짝수인지 홀수인지 출력 하는 예제이다. where는 <code>if</code>와 같이 뒤의 구문에 Bool 타입의 조건을 걸어주고 <code>isMultiple(of: _)</code>매서드는 <code>_</code>안의 수로 나누었을때, 0 이 될시 true를 반환하기 때문에 2로 나누었을때 0으로 떨어지는 수는 짝수이고 그렇지 않을 경우에는 홀수가 나오게 된다.</p><h3 id="1-1-3-guard-구문">1.1.3.guard 구문</h3><p>guard 구문은 특정 조건을 만족하면 해당 분기문 실행하며, 조건에 맞지 않으면 바로 종료한다.<code>들여쓰기 중첩 방지를하기위해 사용되기도 한다</code>.</p><p><em>guard 구문 구성</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 조건 <span class="number">1</span> &#123;</span><br><span class="line">  실행 코드 <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 조건 <span class="number">2</span> &#123;</span><br><span class="line">  실행 코드 <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">guard</span> 조건 <span class="number">3</span> <span class="keyword">else</span> &#123;</span><br><span class="line">  실행코드 <span class="number">3</span>(예외상황 실행문, 제어문 전환 명령어)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>조건 1, 2을 실행하다 <code>guard</code>구문의 조건 3의 결과가 true가 되면 실행코드 3을 실행하고, 조건 3의 결과가 false가 되면 <code>자신보다 상위에 있는 코드블럭을 바로 종료</code>한다.</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>흐름 제어(Flow control) 반복문</title>
      <link href="/2020/04/13/swift/swift-FlowControll2/"/>
      <url>/2020/04/13/swift/swift-FlowControll2/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">FlowControl</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.흐름 제어(Flow control) 반복문</h1><p>프로그램을 작성하다 <code>특정 조건에서 코드를 실행해야 하거나 실행하지 말아야 하는 상황이나, 특정 상확을 반복해야하는 일</code>이 발생하는데 이때에 사용하는것이 조건문과 반복문이다. 스위프트의 흐름제어 구문에서는 소괄호(())를 대부분 생략할 수 있다.</p><h2 id="1-1-반복문">1.1.반복문</h2><p>스위프트의 조건문에는 <code>for-in 구문</code>과 <code>while 구문</code>, <code>repeat-while 구문</code>이 있다.</p><h3 id="1-1-1-for-in-구문">1.1.1.for-in 구문</h3><p>스위프트 3.0에서 전통적인 C언어 스타일의 for구문이 사라지고 생긴 구문이다. for-in 반복문은 타 언어의 for-each 구문과 유사하다.</p><p><em>for-in 구문 구성</em></p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 임시 상수 <span class="keyword">in</span> 시퀸스 아이템 &#123;</span><br><span class="line">    실행 코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-in구문은 반복적인 데이터나 시퀸스를 다룰 때 많이 사용한다.</p><p><em>for-in 구문 예제</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1</span>...<span class="number">4</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(index) times 5 is \(index * 5)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index인 임시상수는 기본1로 시작하여 반복문이 한번 실행 될 때, 마다 1식 값이 증가한다.</p><p><em>Wildcard Pattern을 사용한 for-in 구문 예제</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>임시 상수가 필요가 없다면 이처럼 <code>와일드카드(_)</code>를 사용하여 값을 비운다.</p><h3 id="1-1-2-while-구문">1.1.2.while 구문</h3><p>다른 언어의 while 구문과 크게 다르지 않다, 특정 조건(<code>Bool 타입으로 지정되어야 함</code>)이 성립하는 한 블록 내부의 코드를 반복해서 실행한다. for-in구문과 마찬가지로 <code>continue, break등의 제어 키워드 사용이 가능하다</code>.</p><p><em>while 구문 구성</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 조건 <span class="number">1</span> &#123;</span><br><span class="line">  실행 코드 <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while 구문은 <code>조건 1</code>의 조건을 구성했을때 그 <code>조건의 값이 Bool타입</code>으로 지정해야한다. 만약 실행 조건 1의 값을 true로 둘 경우 <code>무한루프</code>를 실행한다.</p><p><em>while 무한루프 예제</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">  sum += num</span><br><span class="line">  num += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>무한루프를 실행할 경우 강제로 종료해주기 전까지 계속 반복 실행하기 때문에, 실행을 권장하지 않는다.</p><h3 id="1-1-3-repeat-while-구문">1.1.3.repeat-while 구문</h3><p>다른 언어의 do-while 구문과 크게 다르지 않다, repeat 블록 코드를 최소 1회 실행 후, while 다음의 조건이 성립하면 블록 내부의 코드를 반복 실행한다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> studys: [<span class="type">String</span>] = [<span class="string">"python"</span>, <span class="string">"Swift"</span>, <span class="string">"Git"</span>, <span class="string">"MarkDown"</span> ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"지금은 \(studys.removeFirst())를 배우고 있습니다."</span>)</span><br><span class="line">&#125; <span class="keyword">while</span> studys.isEmpty == <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 지금은 python를 배우고 있습니다.</span></span><br><span class="line"><span class="comment">// 지금은 Swift를 배우고 있습니다.</span></span><br><span class="line"><span class="comment">// 지금은 Git를 배우고 있습니다.</span></span><br><span class="line"><span class="comment">// 지금은 MarkDown를 배우고 있습니다.</span></span><br></pre></td></tr></table></figure><p>studys라는 배열에 문자열 타입 요소4개를 선언하고, 4번째 라인에 있는 print를 통해 배열의 요소를 출력하는데 removeFirst()는 첫번째 배열의 요소를 삭제하는 매서드 이지만 삭제함과 동시에 삭제한 요소를 반환하기 때문에 삭제한 요소가 print에 출력된다. 그리고 배열의 요소가 비어있지 않을때까지 반복 실행하게 된다.</p><h2 id="1-2-구문-이름표">1.2.구문 이름표</h2><p>반복문을 중첩으로 작성하다보면 반복문을 제어하는 키워드(break, continue 등)이 어떤 범위에 적용되어야 하는지 애매할때, <code>반복문 앞에 이름과 함께 콜론을 붙여 구문의 이름을 지정</code>해주는 구문 이름표를 사용하면 좋다.</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>고양이</title>
      <link href="/2020/04/12/Algorithm/Algorithm-Q10171/"/>
      <url>/2020/04/12/Algorithm/Algorithm-Q10171/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">10171번</span><h1>1.문제 10171번</h1><h2 id="1-1-고양이">1.1.고양이</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">256 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>아래 예제와 같이 고양이를 출력하시오.</p><h3 id="1-3-입력"><s>1.3.입력</s></h3><h3 id="1-4-출력">1.4.출력</h3><p>고양이를 출력한다.</p><h3 id="1-5-예제입력"><s>1.5.예제입력</s></h3><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\    /\</span><br><span class="line"> )  ( ')</span><br><span class="line">(  /  )</span><br><span class="line"> \(<span class="number">__</span>)|</span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"\\    /\\"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">" )  ( \')"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"(  /  )"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">" \\(__)|"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>강아지</title>
      <link href="/2020/04/12/Algorithm/Algorithm-Q10172/"/>
      <url>/2020/04/12/Algorithm/Algorithm-Q10172/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">10172번</span><h1>1.문제 10172번</h1><h2 id="1-1-강아지">1.1.강아지</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">256 MB</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>아래 예제와 같이 개를 출력하시오.</p><h3 id="1-3-입력"><s>1.3.입력</s></h3><h3 id="1-4-출력">1.4.출력</h3><p>개를 출력한다.</p><h3 id="1-5-예제입력"><s>1.5.예제입력</s></h3><h3 id="1-6-예제출력">1.6.예제출력</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|\<span class="number">_</span>/|</span><br><span class="line">|q p|   /&#125;</span><br><span class="line">( <span class="number">0</span> )<span class="string">"""\</span></span><br><span class="line"><span class="string">|"^"`    |</span></span><br><span class="line"><span class="string">||_/=\\__|</span></span><br></pre></td></tr></table></figure><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"|\\_/|"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"|q p|   /&#125;"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"( 0 )\"\"\"\\"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"|\"^\"`    |"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"||_/=\\\\__|"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터 타입(Data Type) 컬렉션형</title>
      <link href="/2020/04/12/swift/swift-DataType3/"/>
      <url>/2020/04/12/swift/swift-DataType3/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">DataType</span><span class="label label-info">Array</span><span class="label label-info">Dictionary</span><span class="label label-info">Set</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.데이터 타입(Data Type) 컬렉션형</h1><p>스위프트는 튜플 이외에도 많은 수의 데이터를 묶어서 저장하고 관리할 수 있는 컬렉션 타입을 제공한다. <code>컬렉션타입은 배열(Array), 딕셔너리(Dictionary), 세트(Set)</code>가 있다.</p><h2 id="1-1-배열-Array">1.1.배열(Array)</h2><p><img src="https://user-images.githubusercontent.com/45344633/79679988-a624b800-8245-11ea-9449-0dfa59a377f2.png" alt="swift-array-collections-with-example"></p><p>배열은 같은 타입의 데이터를 일렬로 나열한 후 순서대로 저장하는 형태의 컬렉션 타입이고, 각기 다른 위치에 같은 값이 들어갈 수도 있다.</p><p>배열을 선언해주는 방법은 let키워드를 사용해 상수로 선언하면 변경할 수 없는 배열이 되고,</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numberArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// numberArray = [1, 3, 5] 🙅‍♂️</span></span><br></pre></td></tr></table></figure><p>변경을 시도하면 다음과 같은 에러를 확인할 수 있다.</p><div class="alert alert-danger"><i class="fa fa-bug"></i>  Cannot assign to value: 'numberArray' is a 'let' constant</div><p>var키워드를 사용해 변수로 선언하면 변경할 수 있는 배열이 된다,</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">numberArray = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>] <span class="comment">// 🙆‍♂️</span></span><br></pre></td></tr></table></figure><h3 id="1-1-1-배열-Array-선언-및-생성">1.1.1.배열(Array) 선언 및 생성</h3><p>배열은 여러가지 방법으로 선언할 수 있고 표현방식도 다양한데,</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> integers: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위와 동일한 표현</span></span><br><span class="line"><span class="keyword">var</span> integers: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = [<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">var</span> integers: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = []</span><br><span class="line"><span class="keyword">var</span> integers: [<span class="type">Int</span>] = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> integers: [<span class="type">Int</span>] = [<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">var</span> integers: [<span class="type">Int</span>] = []</span><br><span class="line"><span class="keyword">var</span> integers = [<span class="type">Int</span>]()</span><br></pre></td></tr></table></figure><p>위와 같이 여러가지 방법으로 배열을 선언할 수 있고, 여러가지 데이터 타입으로 선언해줄 수 있다</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appleDevice: [<span class="type">String</span>] = [<span class="string">"AppleWatch"</span>, <span class="string">"iPhone"</span>, <span class="string">"MacBookPro"</span>]</span><br><span class="line"><span class="keyword">var</span> grades: [<span class="type">Double</span>] = [<span class="number">3.1</span>, <span class="number">3.5</span>, <span class="number">4.5</span>]</span><br></pre></td></tr></table></figure><p>비어있는 배열을 선언하고 난 후에 <code>isEmpty</code>라는 프로퍼티로 비어있는 배열인지 확인해볼 수 있고,</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyArray: [<span class="type">Int</span>] = []</span><br><span class="line"></span><br><span class="line">emptyArray.isEmpty <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>배열에 몇 개의 요소가 존재하는지 알고 싶다면 <code>count</code>프로퍼티를 이용해 확인해볼 수 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appleDevice: [<span class="type">String</span>] = [<span class="string">"AppleWatch"</span>, <span class="string">"iPhone"</span>, <span class="string">"MacBookPro"</span>]</span><br><span class="line"></span><br><span class="line">appleDevice.<span class="built_in">count</span> <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-배열-Array-의-사용">1.1.2.배열(Array)의 사용</h3><p>배열을 사용하다가 보면 요소를 확인해보거나, 요소를 추가하거나, 요소를 삭제하고싶을 경우가 생기는데 그 방법에 대해 알아보자.</p><p>먼저 배열의 처음과 끝 요소를 확인해보고 싶을때에는 <code>first</code>와 <code>last</code>프로퍼티를 통해 가져올 수 있고, <code>index(of:)</code>메서드를 사용하면 해당 요소의 인덱스를 알 수도 있는데 다음에서 알아보자.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberArray: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">numberArray.first   <span class="comment">// 1</span></span><br><span class="line">numberArray.last    <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>우선 1에서 5까지의 요소가 들어있는 정수형 배열을 선언한 후 first와 last프로퍼티를 통해 값을 확인해 보았는데, first는배열의 첫번째 요소가 출력되었고 last는 배열의 마지막 요소가 출력된것을 확인할 수 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberArray: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">numberArray[<span class="number">1</span>...<span class="number">2</span>]          <span class="comment">// [2, 3]</span></span><br><span class="line">numberArray[<span class="number">1</span>...<span class="number">2</span>] = [<span class="number">0</span>, <span class="number">0</span>] <span class="comment">// [1, 0, 0, 4, 5]</span></span><br></pre></td></tr></table></figure><p>이렇게 <code>표현범위 연산자</code>를 사용하여 배열의 일부분만 가져올 수도 있는데 해당 범위의 인덱스에 해당하는 요소를 보여주고 읽기만 가능한것이 아니라 요소를 바꾸고 싶을때, 범위에 맞게 요소를 바꿀수도 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberArray: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">numberArray.index(of: <span class="number">2</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>여기에서는 배열의 숫자 2라는 요소의 위치가 배열의 두번째 위치에 있기 때문에 0부터 시작하는 배열의 특성상 1이라는 결과를 보여준다. 중복된 요소가 존재할 때에는 시작점부터(0번째) 제일 먼저 발견된 요소의 인덱스를 반환한다.</p><div class="alert alert-warning"><i class="fa fa-bell"></i>  'index(of:)' is deprecated: renamed to 'firstIndex(of:)'</div><p><em>현재는 index(of:)프로퍼티를 사용할 시 firstIndex(of:)를 사용하라는 위험문구를 보여준다.</em></p><p>배열의 값을 추가하고 싶을 경우에는 다음과 같이 <code>insert(_:at:)</code>메서드와 <code>append(_:)</code>를 사용하면 되는데, <code>append(_:)</code>의 경우부터 알아보자면</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberArray: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">numberArray.append(<span class="number">6</span>)   <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>선언한 배열에 append(6)을 하였는데 <code>append(_:)</code>메서드의 경우에는 배열의 맨 위에 요소가 추가된다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberArray: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">numberArray.insert(<span class="number">0</span>, at: <span class="number">0</span>)    <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>위의 코드블럭을 보면 알 수 있지만 <code>insert(_:at:)</code>메서드는 insert(<code>추가를 원하는 요소값</code>, at: <code>배열의 위치</code>)를 명시하여 주면 원하는 위치에 배열에 값을 추가할 수 있다.</p><p>요소를 삭제하기를 원할때에는 <code>remove(_:)</code>메서드를 사용하게 되는데,</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberArray: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">numberArray.remove(at: <span class="number">1</span>)   <span class="comment">// [1, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><code>numberArray.remove(at: 1)</code>를 실행하면 배열의 1번인덱스에 해당하는 요소인 숫자2를 가르키고 삭제한 후 반환된다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberArray: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">numberArray.removeFirst()   <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line">numberArray.removeLast()    <span class="comment">// [2, 3, 4]</span></span><br><span class="line">numberArray.removeAll()     <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>그리고 첫번째 배열요소를 삭제하고싶을때에는 <code>removeFirst()</code>를 이용해 삭제할 수 있고, 마지막 요소를 삭제하고 싶다면 <code>removeLast()</code>를 이용해 삭제할 수 있고 <code>removeAll()</code>를 사용하면 배열의 모든 요소를 삭제해 빈 배열을 만들 수 있다.</p><blockquote><p>스위프트 4.2버전에서 컬렉션에서 임의의 요소를 추출하는 <code>randomElement()</code>메서드와 컬렉션의 요소를 임의로 섞어주는 <code>shuffle()</code>메서드, 자신의 요소는 그대로 둔 채 새로운 컬렉션에 임의로 순서를 섞어서 반환하는 <code>shuffled()</code>메서드가 추가되었다.</p></blockquote><h2 id="1-2-딕셔너리-Dictionary">1.2.딕셔너리(Dictionary)</h2><p><img src="https://user-images.githubusercontent.com/45344633/79679965-7bd2fa80-8245-11ea-9161-f4adb89e1397.png" alt="swift-dictionary-collection-with-example"></p><p>딕셔너리는 요소가 순서없이 키(Key)와 값(Value)의 쌍으로 구성되는 컬렉션 타입이다.<br>Key는 같은 이름을 중복해서 사용할 수 없는 Unique한 값을 가지지만, key에 쌍으로 구성되는 Value의 경우 중복해서 사용할 수 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someDic: [<span class="type">String</span>: <span class="type">String</span>] = [<span class="string">"Key0"</span>: <span class="string">"value0"</span>, <span class="string">"Key1"</span>: <span class="string">"value0"</span>, <span class="string">"key2"</span>: <span class="string">"value1"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["Key1": "value0", "Key0": "value0", "key2": "value1"]</span></span><br></pre></td></tr></table></figure><p>여기서 알 수 있듯이 딕셔너리에서 키(Key)는 값(Vlaue)을 대변하는 유일한 식별자가 되며 들어가는 순서는 결과를 보면 알듯이 순서가 없다.</p><h3 id="1-2-1-딕셔너리-Dictionary-의-사용">1.2.1.딕셔너리(Dictionary)의 사용</h3><p>배열과 마찬가지로 딕셔너리또한 표현방법이 다양하다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Key가 String 타입이고 Value가 Any인 빈 Dictionary 생성</span></span><br><span class="line"><span class="keyword">var</span> anyDictionary: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt; = [<span class="type">String</span>: <span class="type">Any</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위와 동일한 표현</span></span><br><span class="line"><span class="keyword">var</span> anyDictionary: <span class="type">Dictionary</span> &lt;<span class="type">String</span>, <span class="type">Any</span>&gt; = <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> anyDictionary: <span class="type">Dictionary</span> &lt;<span class="type">String</span>, <span class="type">Any</span>&gt; = [:]</span><br><span class="line"><span class="keyword">var</span> anyDictionary: [<span class="type">String</span>: <span class="type">Any</span>] = <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> anyDictionary: [<span class="type">String</span>: <span class="type">Any</span>] = [<span class="type">String</span>: <span class="type">Any</span>]()</span><br><span class="line"><span class="keyword">var</span> anyDictionary: [<span class="type">String</span>: <span class="type">Any</span>] = [:]</span><br><span class="line"><span class="keyword">var</span> anyDictionary = [<span class="type">String</span>: <span class="type">Any</span>]()</span><br></pre></td></tr></table></figure><p>딕셔너리도 <code>isEmpty, count</code>프로퍼티를 사용해 비어있는 딕셔너리를 확인하거나 딕셔너리의 요소를 확인할 수있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> words = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"B"</span>: <span class="string">"Banana"</span>, <span class="string">"C"</span>: <span class="string">"City"</span>]</span><br><span class="line"><span class="keyword">let</span> countOfWords = words.<span class="built_in">count</span>  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !words.isEmpty &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(countOfWords) element(s)"</span>)   <span class="comment">// "3 element(s)"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"empty dictionary"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>words딕셔너리의 키와 값의 쌍이 3쌍이므로 <code>words.count</code>를 실행하면 3이라는 Int형 정수를 받을 수 있다. 그리고 난 후 아래의 분기에서 words가 빈 배열이 아니면 <code>print(&quot;\(countOfWords) element(s)&quot;)</code>를행하기 때문에 <code>countOfWords</code>상수에 넣은 words.count의 값이 정수형 <code>3</code>이기때문에 실행하게 되면 3 element(s)를 볼 수 있다.</p><h3 id="1-2-2-요소-검색-Retrieve-an-Element">1.2.2.요소 검색(Retrieve an Element)</h3><p>딕셔너리에서 요소 검색을 할 때에는 키로 접근할 수 있는데,</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> words = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"B"</span>: <span class="string">"Banana"</span>, <span class="string">"C"</span>: <span class="string">"City"</span>]</span><br><span class="line"></span><br><span class="line">words[<span class="string">"A"</span>]      <span class="comment">// "Apple"</span></span><br><span class="line">words[<span class="string">"Q"</span>]      <span class="comment">// nil</span></span><br><span class="line"></span><br><span class="line">words.keys      <span class="comment">// ["C", "A", "B"]</span></span><br><span class="line">words.values    <span class="comment">// ["City", "Apple", "Banana"]</span></span><br></pre></td></tr></table></figure><p>배열에서는 없는 요소로 접근시에 오류를 발생하지만 딕셔너리의 경우 nil을 반환한다. 단순히 해당 딕셔너리의 value나 key를 검색하고 싶을때에는 <code>.keys</code> 나 <code>.values</code>를 사용하여 볼 수 있는데 순서가 없이 나열되는것도 확인할 수 있다.</p><p>또한 for 구문을 활용하여 요소를 검색할수 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> words = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"B"</span>: <span class="string">"Banana"</span>, <span class="string">"C"</span>: <span class="string">"City"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> words &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(key): \(value)"</span>)</span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">// C: City</span></span><br><span class="line"><span class="comment">// B: Banana</span></span><br><span class="line"><span class="comment">// A: Apple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key, <span class="number">_</span>) <span class="keyword">in</span> words &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Key :"</span>, key)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// Key : C</span></span><br><span class="line"><span class="comment">// Key : B</span></span><br><span class="line"><span class="comment">// Key : A</span></span><br><span class="line"><span class="keyword">for</span> (<span class="number">_</span>, value) <span class="keyword">in</span> words &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Value :"</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Value : City</span></span><br><span class="line"><span class="comment">// Value : Banana</span></span><br><span class="line"><span class="comment">// Value : Apple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> words.values &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Value :"</span>, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Value : City</span></span><br><span class="line"><span class="comment">// Value : Banana</span></span><br><span class="line"><span class="comment">// Value : Apple</span></span><br></pre></td></tr></table></figure><p>key와 value를 <code>튜플(Tuple)</code>으로 받아 for 구문을 사용할 수 있는데 요소의 개수만큼 구문이 반복을 실행하고, value는 필요하지않고 key만 필요한 경우 <code>_</code>를 사용하여 생략할 수 있으며(반대의 경우도 가능하다) 애초에 value만을 받겠다고 할 경우 <code>.values</code>를 활용하여 value요소만 받은다음 for 구문을 통하여 value만 확인할 수 있다.</p><h3 id="1-2-3-기존-요소-변경-Change-an-Existing-Element">1.2.3.기존 요소 변경(Change an Existing Element)</h3><p>딕셔너리에 기존에 있던 요소를 변경하기위한 방법은 다음과 같으며 값이 있으면 덮어쓰고, 없으면 값을 넣어주는 방식이다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict = [<span class="string">"A"</span>: <span class="string">"Apple"</span>, <span class="string">"B"</span>: <span class="string">"BIOS"</span>, <span class="string">"C"</span>: <span class="string">"Computer"</span>]</span><br><span class="line">dict = [:]                  <span class="comment">// [:]</span></span><br><span class="line">dict[<span class="string">"A"</span>] = <span class="string">"Application"</span>   <span class="comment">// ["A": "Application"]</span></span><br><span class="line">dict[<span class="string">"A"</span>] = <span class="string">"App"</span>           <span class="comment">// ["A": "App"]</span></span><br></pre></td></tr></table></figure><p>dict라는 딕셔너리를 생성해주고 난 후에 2번째 라인에서 빈 배열로 초기화 <code>[:]</code>를 한 후에 3번째 라인에서 <code>&quot;A&quot;</code>라는 key에 value값을 <code>&quot;Application&quot;</code>으로 변경하고 다시 <code>&quot;A&quot;</code>키에 <code>&quot;App&quot;</code>이라는 value를 넣어주었다.</p><h2 id="1-3-세트-Set">1.3.세트(Set)</h2><p><img src="https://user-images.githubusercontent.com/45344633/79680010-d3716600-8245-11ea-845a-a16833789f6b.png" alt="swift-set-collection-with-example"></p><p>세트는 같은 타입의 데이터를 순서 없이 하나의 묶음으로 저장하는 형태의 컬렉션 타입이다. 그런 특성 때문에 <code>순서가 중요하지 않거나 각 요소가 유일한 값</code>일경우에 사용한다.</p><h3 id="1-3-1-세트-Set-의-사용">1.3.1.세트(Set)의 사용</h3><p>세트는 Array, Dictionary와 다르게 축약형이 존재하지 않는다.(배열 에서는 Array<Int>를 [Int]로 축약 가능하기 때문에 세트도 이렇게 표현시 타입추론을 통하여 컴파일러는 Set이 아닌 Array로 인식하기 때문), let키워드를 사용하여 선언하면 상수로 선언되기 때문에 변경이 불가능하고 var키워드를 사용해 선언하면 변수로 선언되기 때문에 요소를 변경할 수 있다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 빈 세트 생성</span></span><br><span class="line"><span class="keyword">let</span> integerSet: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> names: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = []</span><br><span class="line"><span class="keyword">var</span> fruitsSet: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>]</span><br><span class="line"></span><br><span class="line">fruitsSet.<span class="built_in">count</span> <span class="comment">// 3</span></span><br><span class="line">fruitsSet.isEmpty <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">fruitsSet.insert(<span class="string">"Banana"</span>) <span class="comment">// &#123;"Melon", "Apple", "Banana", "Orange"&#125;</span></span><br><span class="line">fruitsSet.remove(<span class="string">"Banana"</span>) <span class="comment">// &#123;"Apple", "Orange", "Melon"&#125;</span></span><br></pre></td></tr></table></figure><p>다른 컬렉션타입과 마찬가지로 <code>isEmpty, count</code>프로퍼티나 <code>insert(_:), remove(_:) </code>메서드를 사용해 비어있는지를확인하거나 몇개의 요소가 존재하는지 확인하거나 요소를 추가하거나 요소르 삭제할 수 있다.</p><h3 id="1-3-2-세트-Set-의-활용">1.3.2.세트(Set)의 활용</h3><p>세트는 내부 값들의 유일함을 보장하는 특징 때문에 집합관계를 표현하고자 할 때 유용하게 쓸일 수 있으며, 두 세트의 교집합, 합집합 등을 연산하는데 유용하다며 <code>sorted()</code>메서드를 이용하여 정렬된 배열을 반환해줄 수 있다.</p><img width="508" alt="image" src="https://user-images.githubusercontent.com/45344633/79705652-5e5b6a80-82f1-11ea-9e7d-ae70fe75bcdc.png"><h4 id="교집합-Intersection">교집합(Intersection)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favoriteFruits = <span class="type">Set</span>([<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>, <span class="string">"Kiwi"</span>])</span><br><span class="line">tropicalFruits = <span class="type">Set</span>([<span class="string">"Banana"</span>, <span class="string">"Papaya"</span>, <span class="string">"Kiwi"</span>, <span class="string">"Pineapple"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 교집합에 해당하는 요소를 반환</span></span><br><span class="line"><span class="keyword">let</span> commonSet = favoriteFruits.intersection(tropicalFruits) <span class="comment">// &#123;"Kiwi"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 교집합에 해당하는 요소만 남기고 나머지 제거</span></span><br><span class="line">tropicalFruits.formIntersection(favoriteFruits) <span class="comment">// &#123;"Kiwi"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="교집합의-여집합-Symmetric-Difference">교집합의 여집합(Symmetric Difference)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favoriteFruits = <span class="type">Set</span>([<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>, <span class="string">"Kiwi"</span>])</span><br><span class="line">tropicalFruits = <span class="type">Set</span>([<span class="string">"Banana"</span>, <span class="string">"Papaya"</span>, <span class="string">"Kiwi"</span>, <span class="string">"Pineapple"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 교집합의 여집합 요소들을 반환</span></span><br><span class="line"><span class="keyword">let</span> exclusiveSet = favoriteFruits.symmetricDifference(tropicalFruits)   <span class="comment">// &#123;"Melon", "Pineapple", "Banana", "Papaya", "Apple", "Orange"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="합집합-Union">합집합(Union)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favoriteFruits = <span class="type">Set</span>([<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>, <span class="string">"Kiwi"</span>])</span><br><span class="line">tropicalFruits = <span class="type">Set</span>([<span class="string">"Banana"</span>, <span class="string">"Papaya"</span>, <span class="string">"Kiwi"</span>, <span class="string">"Pineapple"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 합집합 반환</span></span><br><span class="line"><span class="keyword">var</span> unionSet = favoriteFruits.union(tropicalFruits) <span class="comment">// &#123;"Kiwi", "Pineapple", "Orange", "Banana", "Melon", "Apple", "Papaya"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="차집합-Subtracting">차집합(Subtracting)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favoriteFruits = <span class="type">Set</span>([<span class="string">"Apple"</span>, <span class="string">"Orange"</span>, <span class="string">"Melon"</span>, <span class="string">"Kiwi"</span>])</span><br><span class="line">tropicalFruits = <span class="type">Set</span>([<span class="string">"Banana"</span>, <span class="string">"Papaya"</span>, <span class="string">"Kiwi"</span>, <span class="string">"Pineapple"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 차집합 반환</span></span><br><span class="line"><span class="keyword">let</span> uncommonSet = favoriteFruits.subtracting(tropicalFruits)    <span class="comment">// &#123;"Orange", "Apple", "Melon"&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터 타입(Data Type) 열거형</title>
      <link href="/2020/04/12/swift/swift-DataType4/"/>
      <url>/2020/04/12/swift/swift-DataType4/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">DataType</span><span class="label label-info">Array</span><span class="label label-info">Dictionary</span><span class="label label-info">Set</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.열거형(enum)</h1><p>열거형은 연관성이 있는 <code>항목을 묶어서 표현할 수 있는 타입</code>니다. 열거형은 배열이나 딕셔너리 같은 타입과 다르게 프로그래머가 정의해준 항목 값 외에는 추가나 수정이 불가능하다. 이런 특성 때문에 딱 정해진 값만 열거형 값에 속할 수 있다.</p><p><em>열거형으로 묶을 수 있는 항목</em></p><table><thead><tr><th>카테고리</th><th>분류</th></tr></thead><tbody><tr><td>방위</td><td>동, 서, 남, 북</td></tr><tr><td>학생</td><td>초등학생, 중학생, 고등학생, 대학생, 대학원생</td></tr><tr><td>지역</td><td>강원도, 경기도, 경상도, 전라도, 제주도, 충청도</td></tr></tbody></table><h2 id="1-1-열거형-선언">1.1.열거형 선언</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CompassPoint</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> north</span><br><span class="line">  <span class="keyword">case</span> south</span><br><span class="line">  <span class="keyword">case</span> east</span><br><span class="line">  <span class="keyword">case</span> west</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>열거형의 타입 이름은 PascalCase(UpperCamelCase)로 표기하고, 각각의 case는 lowerCamelCase로 표기한다. CompassPoint라는 이름을 가진 열거형은 north, south, east, west라는 항목이 있는데 각 항목은 그 자체가 고유의 값이며 항목이 많아지게 된다면 한줄에 표현하는것도 가능하다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CompassPoint</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> north, south, east, west</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>열거형을 사용하기위해 변수를 생성하고 값을 할당하는 방법은 다음과 같다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compassNorth: <span class="type">CompassPoint</span> = <span class="type">CompassPoint</span>.north</span><br><span class="line"><span class="keyword">var</span> compassNorth: <span class="type">CompassPoint</span> = .north</span><br><span class="line"></span><br><span class="line">compassNorth = .north</span><br></pre></td></tr></table></figure><p>1번라인과 2번라인은 값이 같은 다른 표현방법 이다. <code>compassNorth</code>라는 변수를 만들고 CompassPoint라는 앞에서 생성한 열거형타입을 타입으로 지정한 후 CompassPoint에서 north case를 변수에 넣어준다.</p><h2 id="1-2-원시-값-Raw-Value">1.2.원시 값(Raw Value)</h2><p>열거형의 각 항목은 자체로 하느의 값이지만 항목의 <code>원시 값</code>도 가질 수 있다. 특정 타입으로 지정된 값을 지정해줄 수 있는데 열거형의 이름 오른쪽에 타입을 명시해주면 된다. 하지만 원시 값은 해당 열거형에서 반드시 고유한 값이여야 한다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WeekdayName</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> sunday = <span class="string">"일요일"</span>, monday = <span class="string">"월요일"</span>, tuesday = <span class="string">"화요일"</span>, wednesday = <span class="string">"수요일"</span>, thursday = <span class="string">"목요일"</span>, friday = <span class="string">"금요일"</span>, saturday = <span class="string">"토요일"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">WeekdayName</span>.monday          <span class="comment">// monday</span></span><br><span class="line"><span class="type">WeekdayName</span>.monday.rawValue <span class="comment">// 월요일</span></span><br></pre></td></tr></table></figure><p>WeekdayName을 문자열 타입을 지정해주고, 각 요일 케이스마다 문자열을 넣어주었다 <code>WeekdayName.monday</code>만 작성할시 추가해준 원시값인 월요일이 나오는것이아니라 WeekdayName의 case인 monday가 나오는것을 확인 할 수 있고, <code>WeekdayName.monday.rawValue</code>인 rawValue프로퍼티를 사용하였을 때에는 추가로 작성한 <code>&quot;월요일&quot;</code>이 출력되는것을 확인할 수 있다.</p><h3 id="1-2-1-원시-값-일부-지정-및-자동처리">1.2.1.원시 값 일부 지정 및 자동처리</h3><p>원시값에 일부 case만 원시값을 지정해줬다면 각 항목의 이름을 그대로 원시 값으로 가지게 되고, 정수 타입이라면 첫 항목을 기준으로 0부터 1씩 늘어난 값을 가지게 된다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WeekdayNameAgain</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> sunday, monday = <span class="string">"mon"</span>, tuesday = <span class="string">"tue"</span>, wednesday, thursday, friday, saturday</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">WeekdayNameAgain</span>.tuesday            <span class="comment">// tuesday</span></span><br><span class="line"><span class="type">WeekdayNameAgain</span>.tuesday.rawValue   <span class="comment">// "tue"</span></span><br><span class="line"></span><br><span class="line"><span class="type">WeekdayNameAgain</span>.wednesday          <span class="comment">// wednesday</span></span><br><span class="line"><span class="type">WeekdayNameAgain</span>.wednesday.rawValue <span class="comment">// "wednesday"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PlanetIntRaw</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> mercury = <span class="number">1</span>, venus, earth, mars, jupiter, saturn, uranus, neptune, pluto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">PlanetIntRaw</span>.venus                  <span class="comment">// venus</span></span><br><span class="line"><span class="type">PlanetIntRaw</span>.venus.rawValue         <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="type">PlanetIntRaw</span>(rawValue: <span class="number">5</span>)           <span class="comment">// jupiter</span></span><br><span class="line"><span class="type">PlanetIntRaw</span>(rawValue: <span class="number">7</span>)           <span class="comment">// uranus</span></span><br></pre></td></tr></table></figure><p>열거형 <code>WeekdayNameAgain</code>은 원시값이 monday, tuesday에 지정해줬기 때문에 지정한 값들을 <code>rawValue</code>로 확인을 하게 되면 지정한 원시값이 출력되지만, 지정하지 않은 열거형 케이스의 원시값을 확인해보면 지정한 케이스가 문자열로 출력되는것을 확인할 수 있다. <code>PlanetIntRaw</code>의 경우 <code>mercury</code>케이스에 숫자 1 을 원시값으로 지정해주었기 때문에 0부터 시작하는것이 아닌 1 부터 시작하여 나열되게 된다</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>We love kriii</title>
      <link href="/2020/04/11/Algorithm/Algorithm-Q10718/"/>
      <url>/2020/04/11/Algorithm/Algorithm-Q10718/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">10718번</span><h1>1.문제 10718번</h1><h2 id="1-1-We-love-kriii">1.1.We love kriii</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th><th style="text-align:center">알고리즘 분류</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">256 MB</td><td style="text-align:center">출력</td></tr></tbody></table><h3 id="1-2-문제">1.2.문제</h3><p>ACM-ICPC 인터넷 예선, Regional, 그리고 World Finals까지 이미 2회씩 진출해버린 kriii는 미련을 버리지 못하고 왠지 모르게 올 해에도 파주 World Finals 준비 캠프에 참여했다.</p><p>대회를 뜰 줄 모르는 지박령 kriii를 위해서 격려의 문구를 출력해주자.</p><h3 id="1-3-입력"><s>1.3.입력</s></h3><h3 id="1-4-출력">1.4.출력</h3><p>두 줄에 걸쳐 &quot;강한친구 대한육군&quot;을 한 줄에 한 번씩 출력한다.</p><h3 id="1-5-예제입력"><s>1.5.예제입력</s></h3><h3 id="1-6-예제출력">1.6.예제출력</h3><p>강한친구 대한육군<br>강한친구 대한육군</p><h3 id="1-7-풀이">1.7.풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"강한친구 대한육군\n강한친구 대한육군"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터 타입(Data Type) 일반</title>
      <link href="/2020/04/11/swift/swift-DataType/"/>
      <url>/2020/04/11/swift/swift-DataType/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">var</span><span class="label label-info">let</span><span class="label label-info">Constants</span><span class="label label-info">Variables</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.데이터 타입(Data Type) 일반</h1><p>스위프트의 데이터 타입에 대하여 알아보자 스위프트의 모든 데이터 타입 이름은 첫 글자가 대문자로 시작하는 <code>대문자 카멜케이스</code>를 사용한다.</p><h2 id="1-1-정수형-Int-UInt">1.1.정수형(Int, UInt)</h2><p>정수 타입으로 <code>Int</code>는 +와 -부호를 포함한 정수이며, <code>UInt</code>는 Unsigned Int의 약자로 -부호를 포함하지 않는 0을 포함한 양의 정수이다. Int와 UInt 타입의 최대 최소값은 각각 max와 min프로퍼티로 확인할 수 있다. 그리고 8비트, 16비트 32비트, 64비트의 형태가 존재하는데 Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32 등으로저장할 수 있는 데이터 크기에 따라 분리되어 있다.</p><h2 id="1-2-불리언-Bool">1.2.불리언(Bool)</h2><p><code>Bool</code>은 불리언 타입으로 <code>참(true)</code>, <code>거짓(false)</code>만 값으로 가진다.</p><h2 id="1-3-실수형-Float-Double">1.3.실수형(Float, Double)</h2><p><code>Float</code>과 <code>Double</code>은 부동소수점을 사용하는 실수이고 부동소수 타입이라고 한다.스위프트에서는 <code>64비트</code> 부동소수 표현을 하는 Double과 <code>32비트</code> 부동소수 표현을 하는 Float이 있다.</p><h2 id="1-4-캐릭터-Character">1.4.캐릭터(Character)</h2><p><code>Character</code>는 문자를 의미한다. 문장 단위가 아닌 <code>한 글자</code>를 의미한다 스위프트는 유니코드 9 문자를 사용하기때문에, 유니코드에서 지원하는 모든 언어 및 특수기호를 사용할 수 있다.</p><h2 id="1-5-문자열-String">1.5.문자열(String)</h2><p><code>String</code>은 문자열로 위의 캐릭터와 마찬가지로 <code>쌍따옴표(&quot;)</code>를 앞뒤에 사용하여 표현한다.</p><h2 id="1-6-Any">1.6.Any</h2><p><code>Any</code>는 스위프트의 모든 데이터 타입을 사용할 수 있다는 뜻, 변수나 상수의 데이터 타입이 Any로 지정되어 있으면 그 변수 또는 상수에는 어떤 종류의 데이터 타입이든지 상관없이 할당할 수 있다. 하지만, 타입에 엄격한 스위프트의 특성상 Any로 선언된 변수의 값을 가져다 쓰려면 매번 타입 확인 및 변환을 해줘야 하는 불편함이 증가하고 오류의 위험을 증가시키기때문에 타입을 될수있으면 명시하는걸 권장한다.</p><h2 id="1-7-AnyObject">1.7.AnyObject</h2><p><code>AnyObject</code>는 Any보다는 조금 한정된 의미로 클래스의 인스턴스만 할당할 수 있다. AnyObject또한 Any와 마찬가지로 권장하지는 않는다.</p><h2 id="1-8-nil">1.8.nil</h2><p><code>nil</code>은 특정 타입이 아니라 <code>없음</code>을 나타내는 스위프트의 <code>키워드</code>이다. 변수 또는 상수에 값이 들어있지 않고 비어있음을 나타내는데 사용한다.</p><h2 id="1-9-그-외-특수문자-제어문자-표현">1.9.그 외 특수문자(제어문자) 표현</h2><p>스위프트에서의 문자열 내 일정기능을하는 <code>특수문자(제어문자)</code>가 있다 특수문자(제어문자)는 모두 백슬래시에 특정 문자를 조합하여 사용한다.</p><table><thead><tr><th>특수문자</th><th>설명</th></tr></thead><tbody><tr><td>\n</td><td>줄바꿈 문자</td></tr><tr><td>\\</td><td>문자열 내에서 백슬래시를 표현하고자 할 때 사용</td></tr><tr><td>\&quot;</td><td>문자열 내에서 큰따옴표를 표현하고자 할 때 사용</td></tr><tr><td>\t</td><td>탭 문자, 키보드의 탭을 눌렀을때와 같은 효과</td></tr><tr><td>\O</td><td>문자열이 끝났음을 알리는 null문자</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>데이터 타입(Data Type) 고급</title>
      <link href="/2020/04/11/swift/swift-DataType2/"/>
      <url>/2020/04/11/swift/swift-DataType2/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">DataType</span><span class="label label-info">typealias</span><span class="label label-info">Tuple</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.데이터 타입(Data Type) 고급</h1><p>애플은 스위프트를 발표할 때 강조했던 특징 중 하나인 <code>안전성</code>이 가장 뚜렷하게 나타난다. 스위프트는 타입에 굉장히 민감하고 엄격하며 서로 다른 타입끼리의 데이터 교환은 꼭 <code>타입캐스팅(형변환)</code>을 거쳐야 한다.</p><h2 id="1-1-타입-추론-Type-Inference">1.1.타입 추론(Type Inference)</h2><p>스위프트에서 변수나 상수를 선언할 때 특정 타입을 명시하지 않아도 컴파일러가 할당된 값을 기준으로 변수나 상수 타입을 결정한다.</p><p><em>타입 추론 예제</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"YoHanCho"</span></span><br><span class="line"><span class="comment">// 타입을 지정하지 않았찌만, 타입 추론을 통하여 name은 String타입 으로 선언된다.</span></span><br></pre></td></tr></table></figure><h2 id="1-2-타입-별칭-type-alias">1.2.타입 별칭(type alias)</h2><p><code>타입 별칭(type alias)</code>은 기본으로 제공하는 데이터 타입이든, 사용자가 임의로 만든 데이터 타입이든 이미 존재하는 데이터 타입에 임의로 다른 이름을 사용할 수 있도록 해준다., 그런 다음 기본타입 이름과 이후에 추가한 별칭을 모두 사용할 수 있다.</p><p><em>타입 별칭 예제</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">MyInt</span> = <span class="type">Int</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">YourInt</span> = <span class="type">Int</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">MyDouble</span> = <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age: <span class="type">MyInt</span> = <span class="number">100</span>                <span class="comment">// MyInt는 Int의 또 다른 이름이다.</span></span><br><span class="line"><span class="keyword">var</span> year: <span class="type">YourInt</span> = <span class="number">2080</span>            <span class="comment">// YourInt도 Int의 또 다른 이름이다.</span></span><br><span class="line"><span class="keyword">let</span> percentage: <span class="type">MyDouble</span> = <span class="number">99.9</span>     <span class="comment">// Int외에 다른 자료형도 모두 별칭 사용이 가능하다.</span></span><br></pre></td></tr></table></figure><h2 id="1-3-튜플-Tuple">1.3.튜플(Tuple)</h2><p><code>튜플(Tuple)</code>은 <code>지정된 데이터의 묶음</code>으로 타입의 이름이 따로 지정되어 있지 않은 타입들을 묶어서 표현할 수 있다.튜플(Tuple) 은 7개 미만 요소에 대한 비교 연산자가 포함되어 있지만 7개 이상의 요소를 비교하기 위해서는 비교 연산자를 직접 구현해야 한다.</p><p><em>튜플 예제</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> something1: (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>) = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="keyword">var</span> something2: (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>) = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">something1 == something2</span><br><span class="line"></span><br><span class="line"><span class="comment">//var something3: (Int, Int, Int, Int, Int, Int, Int) = (1,2,3,4,5,6,7)</span></span><br><span class="line"><span class="comment">//var something4: (Int, Int, Int, Int, Int, Int, Int) = (1,2,3,4,5,6,7)</span></span><br><span class="line"><span class="comment">//something3 == something4</span></span><br><span class="line"><span class="comment">// 7개 까지 표현은 되지만, 비교 연산을 할 때 에러를 보여준다.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Wold</title>
      <link href="/2020/04/10/Algorithm/Algorithm-Q2557/"/>
      <url>/2020/04/10/Algorithm/Algorithm-Q2557/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Algolithm</span><span class="label label-primary">백준온라인저지</span><span class="label label-primary">Swift</span><span class="label label-info">2557번</span><h1>1.1.문제 2557번</h1><h2 id="Hello-World">Hello World</h2><table><thead><tr><th style="text-align:center">시간제한</th><th style="text-align:center">메모리 제한</th><th style="text-align:center">알고리즘 분류</th></tr></thead><tbody><tr><td style="text-align:center">1초</td><td style="text-align:center">128MB</td><td style="text-align:center">출력</td></tr></tbody></table><h3 id="문제">문제</h3><p>Hello World!를 출력하시오.</p><h3 id="입력">입력</h3><p>없음</p><h3 id="출력">출력</h3><p>Hello World!를 출력하시오.</p><h3 id="예제입력"><s>예제입력</s></h3><h3 id="예제출력">예제출력</h3><p>Hello World!</p><h3 id="풀이">풀이</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algolithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>블로그 검색결과 기능추가</title>
      <link href="/2020/04/10/blog/blog-update200410/"/>
      <url>/2020/04/10/blog/blog-update200410/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Blog</span><span class="label label-info">update</span><span class="label label-info">blog</span><span class="label label-info">Hexo</span><span class="label label-info">custom</span><h1>1.검색결과 기능추가</h1><p>내가 지금 포스팅하고 있는 Hexo블로그의 테마에서 검색결과 리스트의 타이틀에서 어느 카테고리 있는지 확인하기 위해서는 결과가 나오는 타이틀의 링크를 타고 들어가서 확인할 수 있었는데 이 번거로움을 제거하기 위해 검색 결과에서 어느 카테고리에 있는지 보여주기 위해 시작하였다.</p><h2 id="1-1-수정-전">1.1.수정 전</h2><p>이것이 수정하기 전의 나의 검색결과이다. 키워드를 검색하여 타이틀을 보여주는 공간에 Swift라는 디렉토리 안에 있는 swift파일 이라는것을 표현해주기 위해서 커스텀한 작업 내용이다.</p> <img width="922" alt="image" src="https://user-images.githubusercontent.com/45344633/78952840-cfd93300-7b11-11ea-9233-21350acac8df.png"><h2 id="1-2-수정-과정">1.2.수정 과정</h2><p>수정한 코드의 부분인 search.js의 일부이다.</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">path, search_id, content_id</span>) </span>&#123;</span><br><span class="line"><span class="meta">   'use strict'</span>;</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">       url: path,</span><br><span class="line">       dataType: <span class="string">"xml"</span>,</span><br><span class="line">       success: <span class="function"><span class="keyword">function</span>(<span class="params"> xmlResponse </span>) </span>&#123;</span><br><span class="line">           <span class="comment">// get the contents from search data</span></span><br><span class="line">           <span class="keyword">var</span> datas = $( <span class="string">"entry"</span>, xmlResponse ).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> &#123;</span><br><span class="line">                   categories: $( <span class="string">"categories"</span>, <span class="keyword">this</span> ).text(),</span><br><span class="line">                   title: $( <span class="string">"title"</span>, <span class="keyword">this</span> ).text(),</span><br><span class="line">                   content: $(<span class="string">"content"</span>,<span class="keyword">this</span>).text(),</span><br><span class="line">                   url: $( <span class="string">"url"</span> , <span class="keyword">this</span>).text()</span><br><span class="line">               &#125;;</span><br><span class="line">           &#125;).get();</span><br></pre></td></tr></table></figure><p>이곳에서 10번째 줄의 <code>categories: $( &quot;categories&quot;, this ).text()</code>를 추가하였는데, Hexo포스트의 상단에 적어주는</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 200410</span><br><span class="line">date: 2020-04-10</span><br><span class="line">categories: Til</span><br><span class="line">toc: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>이 구조에서 categoroies안에 있는 텍스트를 받아오는 내용인것 같다.</p><p>그 다음 작업은</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// perform local searching</span></span><br><span class="line">datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> content_index = [];</span><br><span class="line">    <span class="keyword">if</span> (!data.title || data.title.trim() === <span class="string">''</span>) &#123;</span><br><span class="line">        data.title = <span class="string">"Untitled"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> data_categories = data.categories.trim();</span><br><span class="line">    <span class="keyword">var</span> data_title = data.title.trim().toLowerCase(); </span><br><span class="line">    <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line">    <span class="keyword">var</span> data_url = data.url;</span><br><span class="line">    <span class="keyword">var</span> index_title = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> index_content = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// only match artiles with not empty contents</span></span><br></pre></td></tr></table></figure><p>코드블럭 8번째 라인에 있는 <code>data_categories</code>변수를 생성하고 읽어온 <code>categories</code>의 데이터를  <code>trim()</code>함수를 활용해 공백을 제거하여 텍스를 변수에 저장하였다.</p><p>변수를 생성하고 <code>console.log()</code>를 활용하여 잘 받아오는지 확인해 보았다.</p><img width="503" alt="image" src="https://user-images.githubusercontent.com/45344633/78953001-61e13b80-7b12-11ea-9a1a-432162e96e9e.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// show search results</span></span><br><span class="line"><span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">    str += <span class="string">"&lt;li&gt;&lt;h4&gt;"</span>+ data_categories +<span class="string">" / &lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title'&gt;"</span>+ data_title +<span class="string">"&lt;/a&gt;&lt;/h4&gt;"</span>;</span><br><span class="line">    <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>);</span><br></pre></td></tr></table></figure><p>코드블럭 3번째 라인에 있는 Html테그를 출력하는 곳에 내가 받아온 값을 저장한 변수인 <code>data_categories</code>를 붙여주어 완성하였다.</p><h2 id="1-3-수정-후">1.3.수정 후</h2><img width="928" alt="image" src="https://user-images.githubusercontent.com/45344633/78952711-6c4f0580-7b11-11ea-825d-162253ad1e2d.png"><p>이제 검색 결과에 어느 카테고리 있는지 링크를 눌러 이동해서 확인하기 전에 보여준다 !</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>변수와 상수(Constants and Variables)</title>
      <link href="/2020/04/10/swift/swift-varlet/"/>
      <url>/2020/04/10/swift/swift-varlet/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Swift</span><span class="label label-info">var</span><span class="label label-info">let</span><span class="label label-info">Constants</span><span class="label label-info">Variables</span><blockquote><p>위 내용은 패스트캠퍼스 iOS 강의 및 야곰님의 <a href="https://www.hanbit.co.kr/store/books/look.php?p_code=B9421379018" target="_blank" rel="noopener">스위프트프로그래밍 3판</a> 내용을 참고하여 개인적으로 요약한 내용이므로 오류가 있을 수 있습니다. 포스트에 문제가 있을거나 피드백은 댓글 달아주시면 작성자가 빠르게확인 할 수 있습니다.</p></blockquote><h1>1.변수와 상수(Constants and Variables)</h1><p>상수와 변수는 현재 어떤 데이터에 대한 상태값, 속성 정보 등을 담고 있는 컨테이너이다.</p><ul><li>상수 (Constants) : 한 번 설정되면 값 변경 불가</li><li>변수 (Variables) : 설정한 값을 변경 가능</li></ul><h2 id="1-1-변수와-상수의-선언-Declare-constans-or-variables">1.1.변수와 상수의 선언(Declare constans or variables)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> maximumNumberOfLoginAttempts = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> currentLoginAttempt = <span class="number">0</span></span><br><span class="line">currentLoginAttempt = <span class="number">1</span></span><br><span class="line"><span class="comment">// maximumNumberOfLoginAttempts 🙅‍♂️</span></span><br></pre></td></tr></table></figure><p>위의 코드블럭에서 변수는 <code>var</code>로 선언한 <code>currentLoginAttempt</code> 이고 상수는 <code>let</code>으로 선언한 <code>maximumNumberOfLoginAttempts</code>이다 위에서 확인할 수 있듯이 변수인 currentLoginAttempt는 3번째 라인에서 1로 변경하였지만 상수인 maximumNumberOfLoginAttempts은 상수이기때문에 변경을 시도할 시 다음과 같은 에러를 반환한다.</p><div class="alert alert-danger"><i class="fa fa-bug"></i>  Constants and Variables.xcplaygroundpage:12:1: note: change 'let' to 'var' to make it mutablelet maximumNumberOfLoginAttempts = 10</div><p><br>변수나 상수명는 소문자로 시작하는 🐫표기법 lowerCamelCase를 사용하는데, Swift에서 변수나 상수명은 가독성이 좋아진다면 변수명이 조금 길더라도 길게 작성하는것이 좋다.</p><h2 id="1-2-여러-상수-또는-변수-선언-Declare-multiple-constants-or-variables">1.2.여러 상수 또는 변수 선언(Declare multiple constants or variables)</h2><p>상수와 변수는 한라인에 여러개의 상수와 변수를 선언할 수 있는데 아래와 같은 방법으로 선언한다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span>, z = <span class="number">0.0</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">z = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>이렇게 선언하게 되면, 변수 <code>x, y, z</code>를 한번에 선언할 수 있다.</p><h2 id="1-3-이름-짓기-Naming">1.3.이름 짓기(Naming)</h2><p>변수나 상수의 이름은 영어 외에도 유니코드나 문자를 포함한 대부분의 문자를 사용해 네이밍이 가능하다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> π = <span class="number">3.14159</span></span><br><span class="line"><span class="keyword">let</span> 你好 = <span class="string">"你好世界"</span></span><br><span class="line"><span class="keyword">let</span> 🐶🐮 = <span class="string">"dogcow"</span></span><br><span class="line"><span class="keyword">let</span> 한글 = <span class="string">"세종대왕"</span></span><br><span class="line"><span class="keyword">let</span> `<span class="keyword">let</span>` = <span class="number">1</span>   </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(π)</span><br><span class="line"><span class="built_in">print</span>(你好)</span><br><span class="line"><span class="built_in">print</span>(한글)</span><br><span class="line"><span class="built_in">print</span>(🐶🐮)</span><br><span class="line"><span class="built_in">print</span>(`<span class="keyword">let</span>`)</span><br><span class="line"></span><br><span class="line">🙅‍♂️</span><br><span class="line"><span class="comment">// e.g.</span></span><br><span class="line"><span class="comment">// let 한글 = "ㄱ"</span></span><br><span class="line"><span class="comment">// let 공 백 = "X"</span></span><br><span class="line"><span class="comment">// let √ = "root"</span></span><br><span class="line"><span class="comment">// let → = "arrow"</span></span><br><span class="line"><span class="comment">// let 369게임 = "12짝45짝..."</span></span><br></pre></td></tr></table></figure><p>변수로 사용할 수없는 이름은 같은 스코프 번위 내에서 중복되는 이름과 공백문자를 포함한 변수이거나 수학기호를 포함하거나 숫자로 시작하는 이름이 변수로 사용할 수 없는 이름인데, 수학기호인 π는 특수한 경우로 사용이 가능하고 Swift 에서 사용되는 키워드일 경우 backquote(`)로 감싸면 사용이 가능하다.</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>포스트 헤더 수정</title>
      <link href="/2020/04/10/blog/blog-update200411/"/>
      <url>/2020/04/10/blog/blog-update200411/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Blog</span><span class="label label-info">update</span><span class="label label-info">Hexo</span><span class="label label-info">custom</span><h1>1.포스트 헤더 수정하기</h1><p>블로그의 각각의 포스트 상단을 보면 경로처럼 표현된 타이틀이 있다. 이것이 현재는 <code>Wiki ~/현재포스트</code> 이런방식으로 표현되고 있는데 여기에 현재 포스트의 카테고리 까지 보여주면 좋을 것 같아 <code>Wiki ~/현재디렉토리/현재포스트</code>이 방식으로 바꾸어 보려고 한다.</p><h2 id="1-1-수정-전">1.1.수정 전</h2><p>이것이 수정하기 전의 모습이다. 텍스트가 현재 포스트(<code>Wiki ~/현재포스트</code>)만 표현되고 있는것을 확인할 수 있다.</p><img width="611" alt="image" src="https://user-images.githubusercontent.com/45344633/79037974-9e935c80-7c10-11ea-9c73-192655f99d68.png"><h2 id="1-2-수정-과정">1.2.수정 과정</h2><p>수정한 코드의 부분인 article.js의 일부이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"brand"</span> href=<span class="string">"&lt;%= config.root %&gt;"</span>&gt;</span><br><span class="line">            &lt;%= config.title %&gt;</span><br><span class="line">        &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">            /</span> &lt;%= page.title %&gt;</span><br><span class="line">    &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>3번째 라인의 <code>&lt;%= config.title %&gt;</code>은 hexo의 <code>_config.yml</code>파일의 title을 보여준다. 현재 나는 Wiki로 설정되어있어 타이틀이 Wiki로 보이게 되는데 그 위에 붙을 내용인 <code>/ &lt;%= page.title %&gt;</code>은 현재 포스트의 타이틀을 보여준다 나는 <code>/</code>앞에 현재 포스트의 카테고리를 보여주려고 하기 때문에,</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"brand"</span> href=<span class="string">"&lt;%= config.root %&gt;"</span>&gt;</span><br><span class="line">            &lt;%= config.title %&gt;</span><br><span class="line">        &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">        &lt;% var currentCategory =  url_for(path).split('/</span><span class="string">')[4] %&gt;</span></span><br><span class="line"><span class="string">        &lt;span class="capitalizeFirst"&gt;~/&lt;%= currentCategory %&gt;/&lt;%= page.title %&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>타이틀(Wiki)<code>&lt;%= config.title %&gt;</code>뒤에 카테고리를 붙여 주었는데 이 방법은 <code>currentCategory</code>라는 변수에 현재의 url을 <code>/</code>로 나누어 배열에 저장하고 5번째의 배열에 있는 정보인 카테고리에 있는 텍스트를 담아서 보여주게 된다. 그리고 그 뒤에 현재의 포스트를 가르키는 <code>/ &lt;%= page.title %&gt;</code>를 붙여 주었다.</p><h2 id="1-3-수정-후">1.3.수정 후</h2><img width="611" alt="image" src="https://user-images.githubusercontent.com/45344633/79038338-7822f080-7c13-11ea-9ed2-347b1cb860a6.png"><p>이제 상단의 경로를 보면 현재의 포스트가 어느 카테고리에 있는지 알 수 있게 되었다.</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>구글 검색 명령어</title>
      <link href="/2020/04/08/utility/utility-googlesearch/"/>
      <url>/2020/04/08/utility/utility-googlesearch/</url>
      
        <content type="html"><![CDATA[<span class="label label-primary">Utility</span><span class="label label-info">GoogleOperator</span><span class="label label-info">Searchpower</span><span class="label label-info">구글검색잘하는법</span><h1>1.구글 검색 명령어(Google Search Operator)</h1><p><code>구글 검색 명령어(Google Search Operator)</code>는 구글 검색을 실행할때 명령어를 활용하여 내가 원하는 검색을 더 쉽게 도와주는 기능을 한다. 앞으로 검색할 일들이 많이 있을 것이기 때문에 알면 도움이 될 것 같다. 그리고 내가 사용하는 맥북 유틸리티 <code>BTT</code>와 <code>alfred</code>를 이용하여 더 화려한? 검색을 할 수 있을것 같다.</p><h2 id="1-1-구글-기본-명령어-Google-basic-Operator">1.1.구글 기본 명령어(Google basic Operator)</h2><p>구글의 일반 검색창에서 활용할 수 있는 명령어 처음엔 어려워 보이지만 익숙해지자🔥</p><table><thead><tr><th style="text-align:center">명령어</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:center">&quot; &quot;</td><td style="text-align:left">큰따옴표 안에 검색어를 입력하면 검색어를 반드시 포함하는 결괏값만 표시한다. (ex. “구글”)</td></tr><tr><td style="text-align:center">OR</td><td style="text-align:left">반드시 대문자로 표기해야 하며, 두 가지의 검색어중 하나의 검색어라도 일치하는 결괏값을 보여준다. (ex. 구글 OR 네이버)</td></tr><tr><td style="text-align:center">|</td><td style="text-align:left">OR 대신 사용할 수 있는 동일한 기능</td></tr><tr><td style="text-align:center">( )</td><td style="text-align:left">검색 명령어를 그룹화하고 순서를 제어할 수 있는 명령어입니다 (ex. (구글 OR 네이버) 애널리틱스)</td></tr><tr><td style="text-align:center">–</td><td style="text-align:left">특정 단어를 제외한 나머지 검색 결과를 보여줍니다 (ex. 안드로이드 -구글)</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">*가 와일드카드처럼 작용해  어떤 단어와도 매치되는 기능이며 정확한 검색어를 모를 때 유용하다.  (ex. 구글 * 콘솔)</td></tr><tr><td style="text-align:center">#…#</td><td style="text-align:left">… 앞뒤로 지정된 숫자(혹은 날짜) 범위 안에 있는 결괏값을 보여주지만 정확도가 떨어진다.  (ex. 구글 업데이트 2010…2017)</td></tr><tr><td style="text-align:center">in</td><td style="text-align:left">단위 변환을 쉽게 할 수 있는 명령어이지만 한글로는 작동하지 않는다. (ex. 1USD in KRW)</td></tr></tbody></table><h2 id="1-2-고급-검색-명령어-Advanced-Search-Operator">1.2.고급 검색 명령어 (Advanced Search Operator)</h2><p>검색의 범위를 좁히고 더욱 깊있는 검색을 하기 위하여 사용하는데, 일반 검색어와 혼용하여 사용할 수 있다.</p><table><thead><tr><th style="text-align:center">명령어</th><th style="text-align:left">설명</th></tr></thead><tbody><tr><td style="text-align:center">define:</td><td style="text-align:left">기본적으로 구글에 내장된 사전의 기능을 하는 명령어이며 검색어에 대한 정의 표시 (ex. define:seo)</td></tr><tr><td style="text-align:center">site:</td><td style="text-align:left">해당 웹사이트에서 색인된 결과만을 보여준다 (ex. site:www.twinword.co.kr/blog/)</td></tr><tr><td style="text-align:center">cache:</td><td style="text-align:left">해당 명령어 뒤에 URL을 추가하여 검색하면 구글에 가장 최근 색인된 해당 웹페이지의 캐시 버전을 보여준다.(ex. cache:www.twinword.co.kr)</td></tr><tr><td style="text-align:center">intitle:</td><td style="text-align:left">페이지 제목(타이틀 태그)에 특정 검색어가 포함된 페이지를 찾도록 명령하는 기능을 한다 (ex. intitle:트윈워드)</td></tr><tr><td style="text-align:center">allintitle:</td><td style="text-align:left">intitle: 명령어와 같은 기능을 하지만 여러 개의 검색어를 모두 포함된 결과만을 표시한다. (ex. allintitle: 트윈워드 아이디어즈)</td></tr><tr><td style="text-align:center">inurl:</td><td style="text-align:left">페이지 URL에 특정 검색어가 포함된 페이지를 찾도록 명령하는 기능을 한다 (ex. inurl:twinword)</td></tr><tr><td style="text-align:center">allinurl:</td><td style="text-align:left">inurl: 명령어와 같은 기능을 하지만 여러 개의 검색어가 모두 포함된 결과만을 표시한다. (ex. allinurl:twinword ideas)</td></tr><tr><td style="text-align:center">intext:</td><td style="text-align:left">본문에 검색어를 포함하는 페이지를 찾도록 명령하는 기능을 한다 (ex. intext:검색엔진최적화)</td></tr><tr><td style="text-align:center">allintext:</td><td style="text-align:left">inurl: 명령어와 같은 기능을 하지만 여러 개의 검색어가 모두 포함된 결과만을 표시한다. (ex. allintext: 트윈워드 seo)</td></tr><tr><td style="text-align:center">filetype:</td><td style="text-align:left">검색 결과를 특정 파일 확장자로 제한하는 명령어이며 “ext:”로 대체할 수 있다. (ex. filetype:pdf 트윈워드)</td></tr><tr><td style="text-align:center">related:</td><td style="text-align:left">특정 웹사이트와 비슷한 웹사이트를 찾아주는 명령어이다. (ex. related:google.com)</td></tr><tr><td style="text-align:center">AROUND(X)</td><td style="text-align:left">두 검색어의 간격이 X 개의 단어 또는 구 이하인 결과를 표시한다.  (ex. twinword AROUND(2) lsi)</td></tr></tbody></table><p><em>구글은 주기적인 업데이트를 통해 활용도가 떨어지거나 필요 없는 검색 명령어들을 삭제하기도 하기 때문에 주기적으로 한 번씩 체크해보자. 또한 더 구체적이고 심화된 나의 검색 파워를 얻기 위해서는 여러 가지 검색 명령어의 조합을 만들어 검색하는 것도 중요하다.</em></p>]]></content>
      
      
      <categories>
          
          <category> Utility </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
